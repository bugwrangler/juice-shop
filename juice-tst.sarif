{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "sha256",
                  "hash",
                  "SHA1"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/electron-userland/electron-builder/commit/105d4d42a8e2b9224a968681be6504bb0267c4e8?diff=split#diff-59348ddd3d4fccfd6decf42545cc66e9L308",
                    "lines": [
                      {
                        "line": "const timer = time(\"executable cache\")",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "// md5 is faster, we don't need secure hash",
                        "lineNumber": 306,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const hash = createHash(\"md5\")",
                        "lineNumber": 307,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const hash = createHash(\"sha512\")",
                        "lineNumber": 307,
                        "lineChange": "added"
                      },
                      {
                        "line": "hash.update(config.electronVersion || \"no electronVersion\")",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "hash.update(config.muonVersion || \"no muonVersion\")",
                        "lineNumber": 309,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/joyent/node-sshpk/commit/94a308d7f86e7d54c5d899f032882954f7d74312?diff=split#diff-fdabe59723da4c3a33fd86b420e49089L87",
                    "lines": [
                      {
                        "line": "Key.prototype.fingerprint = function (algo) {",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (algo === undefined)",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    algo = 'md5';",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    algo = 'sha256';",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "  assert.string(algo, 'algorithm');",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var opts = {",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "    hash: this.hash(algo),",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    algorithm: algo",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  };",
                        "lineNumber": 91,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jeresig/pharos-images/commit/620704fe9525f5c7dc74e214f3cfe87ad2793a60?diff=split#diff-499f237884fb915a0a9db0c8093eb667L20",
                    "lines": [
                      {
                        "line": " maxAttempts: 3,",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "md5File: function(file, callback) {",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    var hash = crypto.createHash(\"md5\");",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "hashFile: function(file, callback) {",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "    var hash = crypto.createHash(\"sha256\");",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "    hash.setEncoding(\"hex\");",
                        "lineNumber": 20,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "switch to sha256",
                  "Files are now hashed with SHA512 instead of SHA1"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "javascript/Ssrf",
              "name": "Ssrf",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n### Best practices for prevention\n* Blacklists are problematic and hackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "request",
                  "tests",
                  "fetch"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Raynos/leaked-handles/commit/43d4f0f51d7e5228295d2183590ae5c1a320d58b?diff=split#diff-4e9c43e3015c671fd4876c4ab789c1cbL167",
                    "lines": [
                      {
                        "line": "    httpRequest._headers.host;",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (httpRequest && stacks.http.get(httpRequest)) {",
                        "lineNumber": 166,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    printStack(stacks.http.get(httpRequest).stack,",
                        "lineNumber": 167,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (httpRequest && stacks.http.requests.get(httpRequest)) {",
                        "lineNumber": 184,
                        "lineChange": "added"
                      },
                      {
                        "line": "    printStack(stacks.http.requests.get(httpRequest).stack,",
                        "lineNumber": 185,
                        "lineChange": "added"
                      },
                      {
                        "line": "        'http handle');",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "} else if (stacks.tcp.get(obj)) {",
                        "lineNumber": 187,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cloudfoundry/stratos/commit/03957def379fbbb0a9e10041c79f1137e6d6f6e4?diff=split#diff-60d44792bb7418fac4e1c192640ea4eeL245",
                    "lines": [
                      {
                        "line": "  params: null",
                        "lineNumber": 242,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 243,
                        "lineChange": "none"
                      },
                      {
                        "line": "return this.http.get(url, requestArgs).pipe(",
                        "lineNumber": 244,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return this.httpClient.get(url, requestArgs).pipe(",
                        "lineNumber": 243,
                        "lineChange": "added"
                      },
                      {
                        "line": "  mergeMap((response: any) => [new WrapperRequestActionSuccess(mapResult(response), action)]),",
                        "lineNumber": 245,
                        "lineChange": "none"
                      },
                      {
                        "line": "  catchError(error => [",
                        "lineNumber": 246,
                        "lineChange": "none"
                      },
                      {
                        "line": "    new WrapperRequestActionFailed(error.message, action, 'fetch', {",
                        "lineNumber": 247,
                        "lineChange": "none"
                      },
                      {
                        "line": "      endpointIds,",
                        "lineNumber": 248,
                        "lineChange": "none"
                      },
                      {
                        "line": "      url: error.url || url,",
                        "lineNumber": 249,
                        "lineChange": "none"
                      },
                      {
                        "line": "      eventCode: error.status ? error.status + '' : '500',",
                        "lineNumber": 250,
                        "lineChange": "none"
                      },
                      {
                        "line": "      message: 'Monocular API request error',",
                        "lineNumber": 251,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SaifRehman/ICP-Airways/commit/ef658e9af772e0b31a8251ee593d72d466617824?diff=split#diff-4805e90a0f40f641310cdd7ea21037afL17",
                    "lines": [
                      {
                        "line": "public fullCountryName: any = \"airport not found\";",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "constructor(public http: Http) {",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "constructor(public http: Http , public provider:Provider) {",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "  this.getJSON().subscribe(data => {",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.rawData = data;",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.provider.rawData = data;",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "  public getJSON() {",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.http",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "      .get(this._url)",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "      .map((response: Response) => response.json());",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "refactor request with tests, more auth wip",
                  "* actually add the new test file",
                  "added own server to fetch user data reliably"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-918"
                ]
              }
            },
            {
              "id": "javascript/ServerLeak",
              "name": "ServerLeak",
              "shortDescription": {
                "text": "Information Exposure"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nSensitive data includes: personally identifiable information (PII) of employees, customers, users, or other third parties; financial information; code; intellectual property; or protected network information such as passwords. Exposure of sensitive information to an unauthorized actor occurs when any party who does not require this information for business purposes can remove this information from the secure network.\nConsequences of exposure can include holding it for ransom payment, identity theft, or access to other internal network resources-along with financial loss due to regulatory fines, court settlements, or cost to restore compromised systems. As most hackers aim to extract sensitive information, this CWE only describes exploits that take advantage of vulnerabilities related to how data is handled: the management, storage, transfer, or removal of sensitive information.\n\n### Best practices for prevention\n- Encrypt data at all times, whether in transit or at rest.\n- When transporting data, always use a secure protocol such as TLS.\n- Before collecting PII or financial information, consider whether there is a true business need for this information; similarly, before storing the data, ensure that there is an ongoing business need.\n- Classify all incoming data according to privacy and security guidelines to improve awareness of sensitive data.\n- Ensure that caching is disabled for all transactions involving sensitive information.\n- Store passwords with secure, salted hashing functions.\n- Apply a network-wide least-privilege policy so sensitive data is provided only to users with business need to know.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "error",
                  "response",
                  "route"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bkimminich/juice-shop/commit/840bf6c3d8f5c4f2ed9c52ec46acbda446a6c69f?diff=split#diff-08f1bfb233b84b010d6d93930895ac7aL35",
                    "lines": [
                      {
                        "line": "ngAfterViewInit () {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.loadQuantity()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.loadProducts()",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "loadQuantity () {",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.quantitySubscription = this.quanitityService.getAll().subscribe((stock) => {",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.quantitySubscription = this.quantityService.getAll().subscribe((stock) => {",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.quantityMap = {}",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "    stock.map((item) => {",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.quantityMap[item.ProductId] = {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "        id: item.id,",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "        quantity: item.quantity",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    })",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  },(err) => {",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.error = err.error",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.confirmation = null",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log(err)",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "loadProducts () {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.productSubscription = this.productService.search('').subscribe((tableData: any) => {",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.tableData = tableData",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.trustProductDescription(this.tableData)",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.dataSource = new MatTableDataSource<Element>(this.tableData)",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.dataSource.paginator = this.paginator",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (window.innerWidth <= 1740) {",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.breakpoint = 3",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (window.innerWidth <= 1300) {",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.breakpoint = 2",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (window.innerWidth <= 850) {",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "          this.breakpoint = 1",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } else {",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.breakpoint = 4",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.gridDataSource = this.dataSource.connect()",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, (err) => console.log(err))",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "ngOnDestroy () {",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (this.productSubscription) {",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.productSubscription.unsubscribe()",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (this.quantitySubscription) {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.quantitySubscription.unsubscribe()",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (this.dataSource) {",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.dataSource.disconnect()",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "inc (id) {",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.modifyQuantity(id,1)",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "dec (id) {",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.modifyQuantity(id,-1)",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "modifyQuantity (id, value) {",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.error = null",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.quanitityService.get(id).subscribe((item) => {",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.quantityService.get(id).subscribe((item) => {",
                        "lineNumber": 96,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let newQuantity = item.quantity + value",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.quanitityService.put(id, { quantity: newQuantity < 0 ? 0 : newQuantity }).subscribe(() => {",
                        "lineNumber": 100,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.quantityService.put(id, { quantity: newQuantity < 0 ? 0 : newQuantity }).subscribe(() => {",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.confirmation = 'Quantity has been updated'",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.loadQuantity()",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    },(err) => {",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.error = err.error",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.confirmation = null",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "        console.log(err)",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "modifyPrice (id, value) {",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.error = null",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.productService.put(id, { price: value < 0 ? 0 : value }).subscribe(() => {",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.confirmation = 'Price has been updated'",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.loadProducts()",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "  },(err) => {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.error = err.error",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.confirmation = null",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log(err)",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "trustProductDescription (tableData: any[]) {",
                        "lineNumber": 125,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  for (let i = 0; i < tableData.length; i++) {",
                        "lineNumber": 126,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    tableData[i].description = this.sanitizer.bypassSecurityTrustHtml(tableData[i].description)",
                        "lineNumber": 127,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 128,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 129,
                        "lineChange": "removed"
                      },
                      {
                        "line": "onResize (event) {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (event.target.innerWidth <= 1740) {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.breakpoint = 3",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (event.target.innerWidth <= 1300) {",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.breakpoint = 2",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (event.target.innerWidth <= 850) {",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.breakpoint = 1",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.breakpoint = 4",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 143,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cla-assistant/cla-assistant/commit/50e4b6896817cfb604e376d799b5c88be367b981?diff=split#diff-a242334f04c9c1a69f8bd75f6686d4ffL40",
                    "lines": [
                      {
                        "line": "public ngOnInit() {",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.userName = this.route.snapshot.params['user'];",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.repoName = this.route.snapshot.params['repo'];",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.pullRequest = this.route.snapshot.params['pullRequest'];",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.redirect = this.route.snapshot.params['redirect'];",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "  this.fullRepoName = `${this.userName}/${this.repoName}`;",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.claBackendService.getLinkedItem(this.userName, this.repoName).subscribe(",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    linkedItem => {",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.getClaText(linkedItem);",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Observable.forkJoin([",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.getClaData(this.userName, this.repoName),",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.checkCla()",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ]).subscribe(",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ([claData, hasSigned]: any[]) => {",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.claText = this.domSanitizationService.bypassSecurityTrustHtml(claData.claText);",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.hasCustomFields = claData.hasCustomFields;",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.customFields = claData.customFields;",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "this.checkCustomFields();",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "this.signed = hasSigned;",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (hasSigned) {",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (this.redirect) {",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.doRedirect();",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err);",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "  this.githubService.getUser().subscribe(",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    user => {",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.loggedInUser = user;",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.checkCla();",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    () => { this.loggedInUser = null; }",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "this.claBackendService",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .getSignatureValues(this.userName, this.repoName)",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .subscribe(customFields => {",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (customFields) {",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.customKeys.forEach(key => {",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "        this.customValues[key] = customFields[key];",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "private getGithubValues() {",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (this.hasCustomFields && this.loggedInUser && !this.signed) {",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.customKeys.forEach((key) => {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "      const githubKey = this.customFields[key].githubKey;",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "      if (githubKey) {",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "private checkCla() {",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.claBackendService.checkCla(this.userName, this.repoName).subscribe(",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    hasSigned => {",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.signed = hasSigned;",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      if (hasSigned) { this.redirect(); }",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    () => { this.signed = false; });",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return this.claBackendService",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .checkCla(this.userName, this.repoName)",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .catch(() => Observable.of(false));",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "private getClaText(linkedItem: LinkedItem) {",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.claBackendService.getGistContent(linkedItem).subscribe(",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    claText => {",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.claText = this.domSanitizationService.bypassSecurityTrustHtml(claText);",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private getClaData(userName: string, repoName: string) {",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return this.claBackendService",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .getLinkedItem(userName, repoName)",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .flatMap((item) => this.claBackendService.getGistContent(item));",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 123,
                        "lineChange": "added"
                      },
                      {
                        "line": "private onChange(key, value) {",
                        "lineNumber": 124,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "private redirect() {",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private doRedirect() {",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "  let redirectUrl = `https://github.com/${this.userName}/${this.repoName}`;",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (this.pullRequest) {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    redirectUrl += `/pull/${this.pullRequest}`;",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.authService.doLogout(true);",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "  setTimeout(function () {",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.window.location.href = redirectUrl;",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, 5000);",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "public agree(): void {",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  let acceptUrl = `/accept/${this.userName}/${this.repoName}`;",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  acceptUrl = this.pullRequest ? acceptUrl + `?pullRequest=${this.pullRequest}` : acceptUrl;",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.window.location.href = acceptUrl;",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "private agree(): void {",
                        "lineNumber": 157,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (!this.hasCustomFields) {",
                        "lineNumber": 158,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let acceptUrl = `/accept/${this.userName}/${this.repoName}`;",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acceptUrl = this.pullRequest ? acceptUrl + `?pullRequest=${this.pullRequest}` : acceptUrl;",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.window.location.href = acceptUrl;",
                        "lineNumber": 161,
                        "lineChange": "added"
                      },
                      {
                        "line": "  } else if (this.loggedInUser) {",
                        "lineNumber": 162,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.claBackendService",
                        "lineNumber": 163,
                        "lineChange": "added"
                      },
                      {
                        "line": "      .signCla(this.userName, this.repoName, this.customValues)",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "      .subscribe(signed => {",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "        this.signed = signed;",
                        "lineNumber": 166,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (signed) {",
                        "lineNumber": 167,
                        "lineChange": "added"
                      },
                      {
                        "line": "          this.doRedirect();",
                        "lineNumber": 168,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bkimminich/juice-shop/commit/1121f4dac00090146e73094a0ccc00a69b834dbc?diff=split#diff-bdb212e0c4a42466225d9bf7cc5acd3dL41",
                    "lines": [
                      {
                        "line": "ngOnInit () {",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.load()",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.userService.whoAmI().subscribe((data) => {",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.userEmail = data.email || 'anonymous'",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.userEmail = '(' + this.userEmail + ')'",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "  },(err) => console.log(err))",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.couponPanelExpanded = localStorage.getItem('couponPanelExpanded') ? JSON.parse(localStorage.getItem('couponPanelExpanded')) : false",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.paymentPanelExpanded = localStorage.getItem('paymentPanelExpanded') ? JSON.parse(localStorage.getItem('paymentPanelExpanded')) : false",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.configurationService.getApplicationConfiguration().subscribe((config) => {",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (config && config.application) {",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (config.application.twitterUrl !== null) {",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.twitterUrl = config.application.twitterUrl",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (config.application.facebookUrl !== null) {",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.facebookUrl = config.application.facebookUrl",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if (config.application.name !== null) {",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.applicationName = config.application.name",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "load () {",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.basketService.find(sessionStorage.getItem('bid')).subscribe((basket) => {",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.dataSource = basket.Products",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "    let length = this.dataSource ? this.dataSource.length : 0",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    for (let i = 0;i < length; i++) {",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.dataSource[i].description = this.sanitizer.bypassSecurityTrustHtml(this.dataSource[i].description)",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  },(err) => console.log(err))",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": " }",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "delete (id) {",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.basketService.del(id).subscribe(() => {",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.load()",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, (err) => console.log(err))",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "inc (id) {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.addToQuantity(id,1)",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "dec (id) {",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.addToQuantity(id,-1)",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "addToQuantity (id,value) {",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.basketService.get(id).subscribe((basketItem) => {",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "    let newQuantity = basketItem.quantity + value",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.basketService.put(id, { quantity: newQuantity < 1 ? 1 : newQuantity }).subscribe(() => {",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.load()",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "    },(err) => console.log(err))",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, (err) => console.log(err))",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "toggleCoupon () {",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.couponPanelExpanded = !this.couponPanelExpanded",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  localStorage.setItem('couponPanelExpanded',JSON.stringify(this.couponPanelExpanded))",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "togglePayment () {",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.paymentPanelExpanded = !this.paymentPanelExpanded",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "  localStorage.setItem('paymentPanelExpanded',JSON.stringify(this.paymentPanelExpanded))",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "checkout () {",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.basketService.checkout(sessionStorage.getItem('bid')).subscribe((orderConfirmationPath) => {",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.redirectUrl = this.basketService.hostServer + orderConfirmationPath",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.windowRefService.nativeWindow.location.replace(this.redirectUrl)",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, (err) => console.log(err))",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "applyCoupon () {",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.basketService.applyCoupon(sessionStorage.getItem('bid'), encodeURIComponent(this.couponControl.value)).subscribe((data: any) => {",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.resetForm()",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.error = undefined",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.translate.get('DISCOUNT_APPLIED', { discount: data }).subscribe((discountApplied) => {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.confirmation = discountApplied",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }, (translationId) => {",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.confirmation = translationId",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    })",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  },(err) => {",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log(err)",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.confirmation = undefined",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.error = err",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.resetForm()",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "showBitcoinQrCode () {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.dialog.open(QrCodeComponent, {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    data: {",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "      data: 'bitcoin:1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm',",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "showDashQrCode () {",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.dialog.open(QrCodeComponent, {",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "    data: {",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "      data: 'dash:Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW',",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "showEtherQrCode () {",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.dialog.open(QrCodeComponent, {",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "    data: {",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "      data: '0x0f933ab9fCAAA782D0279C300D73750e1311EAE6',",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "  resetForm () {",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.couponControl.setValue('')",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.couponControl.markAsPristine()",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.couponControl.markAsUntouched()",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 169,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Some cleanup / error handling",
                  "fix error response",
                  "(errors) routes - Add arsenal errors"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-200"
                ]
              }
            },
            {
              "id": "javascript/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "API",
                  "server",
                  "error"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Uintra/Uintra/commit/02018d66b67b28d628874321aef94fdb97a62ac8?diff=split#diff-99c8368aa079297660230c68ab8f7c87L39",
                    "lines": [
                      {
                        "line": "  private sanitizer: DomSanitizer,",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": ") {",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.route.data.subscribe(data => {",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.data = data;",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.parsedData = ParseHelper.parseUbaselineData(this.data);",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this._query.pipe(",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    debounceTime(200),",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    distinctUntilChanged(),",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ).subscribe(value => {",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.getResults();",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "ngOnInit() {",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.availableFilters = Object.values(this.parsedData.filterItems).map((item: any) => ({",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "    id: item.id,",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "    text: this.translate.instant(item.name)",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }));",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.resultsList = this.parsedData.results || [];",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const paramsSubscription =  this.route.queryParams.subscribe(params => {",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let query = params && params.query ? params.query : \"\";",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.inputValue = query;",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.inputValue = this.parsedData.query;",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": " }",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "onQueryChange(val: string): void {",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.inputValue = val;",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this._query.next(val);",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "onTagsChange(val): void {",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.selectedFilters = val;",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this._query.next(val);",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "onCbxChange(val): void {",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this._query.next(val);",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "requestDataBuilder(): ISearchRequestData {",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    query: this.inputValue,",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    page: this.currentPage,",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "    types: this.selectedFilters.map(filter => filter.id),",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    onlyPinned: this.isOnlyPinned",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "getResultsTitle(): string {",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const firstPart = this.translate.instant('searchResult.YouSearchedFor.lbl').replace('{0}', this.query)",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const secondPart = this.translate.instant('searchResult.Count.lbl').replace('{0}', this.resultsCount)",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return this.resultsCount !== undefined ? firstPart + \" \" + secondPart : \"\";",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "switch (item.type) {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case '##Search.Member##':",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.translate.instant('##Search.Member##');",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case '##Search.Socials##':",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return `${this.translate.instant('##Search.Socials##')} ${item.publishedDate}`;",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case 'News':",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return `${this.translate.instant('News')} ${item.publishedDate}`;",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case 'Event':",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return `${this.translate.instant('Event')} ${item.startDate} - ${item.endDate}`;",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case 'Content':",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.translate.instant('Content');",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case 'Document':",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.translate.instant('Document');",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "  case 'Tag':",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return this.translate.instant('Tag');",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  default:",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return null;",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "  getResults(): void {",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.isResultsLoading = true;",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.searchService.search(this.requestDataBuilder()).pipe(",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "      finalize(() => {",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "        this.isResultsLoading = false;",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "      })",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ).subscribe((res: any) => {",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.isScrollDisabled = res.results.length == res.resultsCount;",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.resultsList = res.results.map(result => ({",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "        ...result,",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "        title: this.sanitizer.bypassSecurityTrustHtml(result.title),",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "        description: this.sanitizer.bypassSecurityTrustHtml(result.description),",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "      }));",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.query = res.query;",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.availableFilters = Object.values(res.filterItems).map((item: any) => ({id: item.id, text: item.name}));",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.parsedData.allTypesPlaceholder = res.allTypesPlaceholder;",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.resultsCount = res.resultsCount;",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "  onLoadMore(): void {",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.currentPage += 1;",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.getResults();",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  onScroll(): void {",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.onLoadMore();",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 144,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/cla-assistant/cla-assistant/commit/50e4b6896817cfb604e376d799b5c88be367b981?diff=split#diff-a242334f04c9c1a69f8bd75f6686d4ffL40",
                    "lines": [
                      {
                        "line": "public ngOnInit() {",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.userName = this.route.snapshot.params['user'];",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.repoName = this.route.snapshot.params['repo'];",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.pullRequest = this.route.snapshot.params['pullRequest'];",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.redirect = this.route.snapshot.params['redirect'];",
                        "lineNumber": 49,
                        "lineChange": "added"
                      },
                      {
                        "line": "  this.fullRepoName = `${this.userName}/${this.repoName}`;",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.claBackendService.getLinkedItem(this.userName, this.repoName).subscribe(",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    linkedItem => {",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.getClaText(linkedItem);",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  Observable.forkJoin([",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.getClaData(this.userName, this.repoName),",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.checkCla()",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  ]).subscribe(",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ([claData, hasSigned]: any[]) => {",
                        "lineNumber": 56,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.claText = this.domSanitizationService.bypassSecurityTrustHtml(claData.claText);",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.hasCustomFields = claData.hasCustomFields;",
                        "lineNumber": 58,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.customFields = claData.customFields;",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "this.checkCustomFields();",
                        "lineNumber": 62,
                        "lineChange": "added"
                      },
                      {
                        "line": "this.signed = hasSigned;",
                        "lineNumber": 64,
                        "lineChange": "added"
                      },
                      {
                        "line": "if (hasSigned) {",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (this.redirect) {",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.doRedirect();",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 68,
                        "lineChange": "added"
                      },
                      {
                        "line": "      }",
                        "lineNumber": 73,
                        "lineChange": "added"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err",
                        "lineNumber": 48,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 49,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err);",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "  this.githubService.getUser().subscribe(",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "    user => {",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.loggedInUser = user;",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "      this.checkCla();",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "    () => { this.loggedInUser = null; }",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "this.claBackendService",
                        "lineNumber": 87,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .getSignatureValues(this.userName, this.repoName)",
                        "lineNumber": 88,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .subscribe(customFields => {",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (customFields) {",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "      this.customKeys.forEach(key => {",
                        "lineNumber": 91,
                        "lineChange": "added"
                      },
                      {
                        "line": "        this.customValues[key] = customFields[key];",
                        "lineNumber": 92,
                        "lineChange": "added"
                      },
                      {
                        "line": "private getGithubValues() {",
                        "lineNumber": 98,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (this.hasCustomFields && this.loggedInUser && !this.signed) {",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.customKeys.forEach((key) => {",
                        "lineNumber": 100,
                        "lineChange": "added"
                      },
                      {
                        "line": "      const githubKey = this.customFields[key].githubKey;",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "      if (githubKey) {",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "private checkCla() {",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.claBackendService.checkCla(this.userName, this.repoName).subscribe(",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    hasSigned => {",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.signed = hasSigned;",
                        "lineNumber": 63,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      if (hasSigned) { this.redirect(); }",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    () => { this.signed = false; });",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return this.claBackendService",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .checkCla(this.userName, this.repoName)",
                        "lineNumber": 116,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .catch(() => Observable.of(false));",
                        "lineNumber": 117,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "private getClaText(linkedItem: LinkedItem) {",
                        "lineNumber": 68,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.claBackendService.getGistContent(linkedItem).subscribe(",
                        "lineNumber": 69,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    claText => {",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      this.claText = this.domSanitizationService.bypassSecurityTrustHtml(claText);",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    },",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    err => this.noLinkedItemError = err",
                        "lineNumber": 73,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private getClaData(userName: string, repoName: string) {",
                        "lineNumber": 119,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return this.claBackendService",
                        "lineNumber": 120,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .getLinkedItem(userName, repoName)",
                        "lineNumber": 121,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .flatMap((item) => this.claBackendService.getGistContent(item));",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 123,
                        "lineChange": "added"
                      },
                      {
                        "line": "private onChange(key, value) {",
                        "lineNumber": 124,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "private redirect() {",
                        "lineNumber": 77,
                        "lineChange": "removed"
                      },
                      {
                        "line": "private doRedirect() {",
                        "lineNumber": 129,
                        "lineChange": "added"
                      },
                      {
                        "line": "  let redirectUrl = `https://github.com/${this.userName}/${this.repoName}`;",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (this.pullRequest) {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "    redirectUrl += `/pull/${this.pullRequest}`;",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "  this.authService.doLogout(true);",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "  setTimeout(function () {",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.window.location.href = redirectUrl;",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }, 5000);",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "public agree(): void {",
                        "lineNumber": 88,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  let acceptUrl = `/accept/${this.userName}/${this.repoName}`;",
                        "lineNumber": 89,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  acceptUrl = this.pullRequest ? acceptUrl + `?pullRequest=${this.pullRequest}` : acceptUrl;",
                        "lineNumber": 90,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  this.window.location.href = acceptUrl;",
                        "lineNumber": 91,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "private agree(): void {",
                        "lineNumber": 157,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (!this.hasCustomFields) {",
                        "lineNumber": 158,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let acceptUrl = `/accept/${this.userName}/${this.repoName}`;",
                        "lineNumber": 159,
                        "lineChange": "added"
                      },
                      {
                        "line": "    acceptUrl = this.pullRequest ? acceptUrl + `?pullRequest=${this.pullRequest}` : acceptUrl;",
                        "lineNumber": 160,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.window.location.href = acceptUrl;",
                        "lineNumber": 161,
                        "lineChange": "added"
                      },
                      {
                        "line": "  } else if (this.loggedInUser) {",
                        "lineNumber": 162,
                        "lineChange": "added"
                      },
                      {
                        "line": "    this.claBackendService",
                        "lineNumber": 163,
                        "lineChange": "added"
                      },
                      {
                        "line": "      .signCla(this.userName, this.repoName, this.customValues)",
                        "lineNumber": 164,
                        "lineChange": "added"
                      },
                      {
                        "line": "      .subscribe(signed => {",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "        this.signed = signed;",
                        "lineNumber": 166,
                        "lineChange": "added"
                      },
                      {
                        "line": "        if (signed) {",
                        "lineNumber": 167,
                        "lineChange": "added"
                      },
                      {
                        "line": "          this.doRedirect();",
                        "lineNumber": 168,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mattdesl/budo/commit/e20ad86032547f0ab93f31c6e932bd78a4fb88dd?diff=split#diff-d7dfcb350720309421bbb465055aafdfL97",
                    "lines": [
                      {
                        "line": "// Handle errors",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "handler.use(function (req, res) {",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.statusCode = 404",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.end('404 not found: ' + req.url)",
                        "lineNumber": 98,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  res.end('404 not found: ' + escapeHtml(req.url))",
                        "lineNumber": 99,
                        "lineChange": "added"
                      },
                      {
                        "line": "})",
                        "lineNumber": 100,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adding api tests for consumer",
                  "Refactored to ensure the server is running before the test runs",
                  "* fixing linting error"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "javascript/HardcodedSecret",
              "name": "HardcodedSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hard-coded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hard-coded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hard-coded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "upgrade",
                  "encryption",
                  "crypto"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bcoin-org/bcoin-native/commit/dffb99829b4baec70c54ec4e30b0d40567a22080?diff=split#diff-bf2f25928a0b46d29e7743d11b05f999L39",
                    "lines": [
                      {
                        "line": "function sha256hmac(data, salt) {",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var hmac = crypto.createHmac('sha256', salt);",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return hmac.update(data).digest();",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  b[i] = i & 0xff;",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "var k = new Buffer(40);",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var k = Buffer.allocUnsafe(40);",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (var i = 0; i < k.length; i++)",
                        "lineNumber": 145,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/avwo/whistle/commit/bb59559e78e204ff77e28cfa3a4854d6b8803dc8?diff=split#diff-9a274f6a23e091c485d7909a10423cc6L570",
                    "lines": [
                      {
                        "line": "var clientId = [hostname, os.platform(), os.release(),",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "  os.arch(), cpus.length, cpus[0] && cpus[0].model, config.clientId];",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "clientId = config.clientId = crypto.createHmac('sha256', 'x-whistle-client-id')",
                        "lineNumber": 569,
                        "lineChange": "removed"
                      },
                      {
                        "line": "clientId = config.clientId = crypto.createHmac('sha256', config.CLIENT_ID_HEADER)",
                        "lineNumber": 569,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .update(clientId.join('\\r\\n')).digest('hex');",
                        "lineNumber": 570,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reimagined/resolve/commit/540a4543324f2ad0702546e456efcdcba2cafce6?diff=split#diff-e91cff9d126cc964c3332c6154811f20R91",
                    "lines": [
                      {
                        "line": "export const createToken = (",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": " { config: { deploymentId, secretKey } },",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "  { dir, expireTime }",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": ") => {",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .replace(/=/g, '')",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "const signature = crypto",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .createHmac('md5', 'key')",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  .createHmac('md5', secretKey)",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .update(payload)",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .digest('hex')",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adjusted utilities to handle Bitcoin Core-style encrypted master keys.",
                  "* Harden crypto"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "javascript/NoRateLimitingForExpensiveWebOperation",
              "name": "NoRateLimitingForExpensiveWebOperation",
              "shortDescription": {
                "text": "Allocation of Resources Without Limits or Throttling"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "server",
                  "file",
                  "page"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/davidmerfield/Blot/commit/f2bcb51b129075c8ebe5c1c23fac36dee35e800c?diff=split#diff-c484f00c3bf8aafe373978f0aa951528L20",
                    "lines": [
                      {
                        "line": "var form = login.route('/');",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "form.all(limiter.prevent);",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "form.get(checkToken, function(req, res){",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.render('log-in-email');",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "form.post(parse, checkEmail, checkReset, checkPassword);",
                        "lineNumber": 34,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/joelseq/SourceGrade/commit/d5e3f547a705162b51fa195747962ecf728a3e37?diff=split#diff-ea75b530d74f94670cea053feb8b961bL59",
                    "lines": [
                      {
                        "line": "} else {",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "  app.use(express.static(path.resolve(__dirname, '../dist')));",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  app.get('*', function (req, res) {",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  app.get('*', (req, res) => {",
                        "lineNumber": 82,
                        "lineChange": "added"
                      },
                      {
                        "line": "    res.sendFile(path.resolve(__dirname, '../dist/index.html'));",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res.end();",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 86,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/gayanvoice/nodejs-graphql/commit/f97d733118ee13ef7eb716c3f3343a7ebc4fd648?diff=split#diff-78c12f5adc1848d13b1c6f07055d996eL140",
                    "lines": [
                      {
                        "line": "app.use(express.static(path.join(__dirname, 'client/build')));",
                        "lineNumber": 138,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.use(limiter, express.static(path.join(__dirname, 'client/build')));",
                        "lineNumber": 144,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.get('*', function(req, res) {",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try{",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        res.sendFile(path.join(__dirname, 'client/build', 'index.html'));",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (e) {",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "        console.log(e);",
                        "lineNumber": 149,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "WIP Fix server tests.",
                  "* Fixed tests failing due to a renamed file.",
                  "* The end-to-end test now works up to the your-claims page."
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-770"
                ]
              }
            },
            {
              "id": "javascript/ZipSlip",
              "name": "ZipSlip",
              "shortDescription": {
                "text": "Arbitrary File Write via Archive Extraction (Zip Slip)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nZip Slip is a form of directory traversal that can be exploited by extracting files from an archive. The premise of the directory traversal vulnerability is that an attacker can gain access to parts of the file system outside of the target folder in which they should reside. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim’s machine. The vulnerability can also cause damage by overwriting configuration files or other sensitive resources, and can be exploited on both client (user) machines and servers.\n\n## Example\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "cwe": [
                  "CWE-22"
                ]
              }
            },
            {
              "id": "javascript/HTTPSourceWithUncheckedType",
              "name": "HTTPSourceWithUncheckedType",
              "shortDescription": {
                "text": "Improper Input Validation"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nAny time the user provides input, the response represents a design challenge that must be anticipated by the developer. Legitimate input must be handled and processed as the application is designed to do. Illegitimate input must be handled properly and under no circumstances passed to the server. If this weakness is present, illegitimate input provided from the user's end could lead to unpredictable results such as the program crashing, unauthorized access to secure resources or command execution at the server side. In addition, if the server is overwhelmed by these types of malfunctions, it may lead to denial of service to legitimate users and tasks.\nThis weakness applies both to input submitted explicitly by the user and to input submitted implicitly, for example, through a cookie or hidden form field. It also applies to both accidental or malicious submission of improper input, if not accounted for during development. Although this is a common and basic flaw, many developers are not aware of coding best practices to anticipate user input, nor of the range of input types that are susceptible to manipulation and exploitation by a malicious user.\n\n### Best practices for prevention\n* Adopt a zero-trust model in which all input is considered potentially suspect.\n* Implement an appropriate validation framework for your development environment.\n* Help developers build their understanding of common failure points of validation logic to harden existing validation.\n* Inventory and analyze all potential input types, including explicit user input, as well as hidden form fields, keys, cookies, and other values passed from the user end.\n* Consider using a deny list of potentially dangerous input values; however, be aware of inherent weaknesses of this technique.\n* Use multiple redundant security checks before granting access to sensitive information, and always encrypt sensitive information.\n* Explicitly convert all incoming data to the required data type, if possible, and then verify that values fall within the acceptable range and/or other applicable parameters.\n* When values come from multiple sources, validate the result before passing the combined value to the program.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "API",
                  "tests"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/popcorn-official/popcorn-api/commit/44217db83118990a8a99932d57ba09c47b948e35?diff=split#diff-4fe21bf6cc4a31b77e55fc70cc39b69cL17",
                    "lines": [
                      {
                        "line": " * @returns {Download} - The download of an export of a collection.",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "getExport(req, res) {",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const collection = req.params.collection;",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "let err;",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (collection.match(/(anime)$|(movie)$|(show)$/i)) {",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const jsonFile = path.join(tempDir, `${collection}s.json`);",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!fs.existsSync(jsonFile)) {",
                        "lineNumber": 22,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/h5bp/server-configs-node/commit/5db172c13b213ed61171d97b04b3e0da75516ffb?diff=split#diff-28a3689be95c88dd5e7a37db516ab084L61",
                    "lines": [
                      {
                        "line": "// this must be the last route, its an addition to the static provider",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.get(':reqPath', function (req, res, next) {",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   var reqPath = req.params.reqPath; // connect populates this",
                        "lineNumber": 61,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// use this header for html files, or add it as a meta tag",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "// to save header bytes serve it only to IE",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (req.headers.user-agent.indexOf('MSIE') && ",
                        "lineNumber": 65,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if (req.headers['user-agent'].indexOf('MSIE') && ",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "   reqPath.match(/\\.html$/) || reqPath.match(/\\.htm$/))",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "   res.setHeader('X-UA-Compatible', \"IE=Edge,chrome=1\");",
                        "lineNumber": 69,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/hoxxep/Gookie/commit/edce200b866c6be8b5348dabca3d979bb74d4198?diff=split#diff-fa8ed57e6f7b322f70fc730854aeb8c5L170",
                    "lines": [
                      {
                        "line": "    res.status(200).send('<html><head><title>Gookie</title></head><body><h1>Your Gookie server is running.</h1></body></html>').end();",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": ".post(function(req, res) {",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "        req.body.repository.url = formatUrl(req.body.repository.url);",
                        "lineNumber": 171,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        validateRequest(req.body);",
                        "lineNumber": 172,
                        "lineChange": "removed"
                      },
                      {
                        "line": "         if (req.body.hasOwnProperty('zen')) {",
                        "lineNumber": 217,
                        "lineChange": "none"
                      },
                      {
                        "line": "             logger.info('Ping event from ' + req.body.repository.url + ' with zen: ' + req.body['zen']);",
                        "lineNumber": 218,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 298,
                        "lineChange": "none"
                      },
                      {
                        "line": "function formatUrl(url) {",
                        "lineNumber": 300,
                        "lineChange": "none"
                      },
                      {
                        "line": "    /**",
                        "lineNumber": 301,
                        "lineChange": "none"
                      },
                      {
                        "line": "     * Get user and repo name from url",
                        "lineNumber": 302,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return formatted github url like: https://github.com/user/repo",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": "var match = url.match(/https?:\\/\\/(?:(?:www|api)\\.)?github\\.com\\/(?:repos\\/)?([a-zA-Z0-9\\-]+)\\/([a-zA-Z0-9\\-]+)\\/?/);",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "try {",
                        "lineNumber": 308,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return 'https://github.com/' + match[1].toLowerCase() + '/' + match[2].toLowerCase();",
                        "lineNumber": 309,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Fix and bulletproof API with unit tests",
                  "Test cleanup"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-20"
                ]
              }
            },
            {
              "id": "javascript/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "file",
                  "module",
                  "xdl"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/fox1t/fastify-multer/commit/f367911ace49de06f3704d083431ef6be01d32b8?diff=split#diff-168726dbe96b3ce427e7fedce31bb0bcL3",
                    "lines": [
                      {
                        "line": "var os = require('os');",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "var fs = require('fs');",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "var path = require('path');",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "var crypto = require('crypto');",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "var Busboy = require('busboy');",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "return function(req, res, next) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "  req.body = req.body || {};",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  req.files = req.files || {}; ",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (req.headers['content-type'] && req.headers['content-type'].indexOf('multipart/form-data') === 0 && req.method === 'POST') {",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "  //if (req.method === 'POST') {",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (options.onParseStart) { options.onParseStart(); }",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // add the request headers to the options",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "    options.headers = req.headers;",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var busboy = new Busboy(options);",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // handle text field data",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "// handle files",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "busboy.on('file', function(fieldname, fileStream, filename, encoding, mimetype) {",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!filename) {",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "    filename = \"\";",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var ext = '.' + filename.split('.').slice(-1)[0];",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var newFilename = rename(fieldname, filename.replace(ext, '')) + ext;",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var path = dest + newFilename;",
                        "lineNumber": 62,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  var newFilePath = path.join(dest, newFilename);",
                        "lineNumber": 66,
                        "lineChange": "added"
                      },
                      {
                        "line": "  var file = {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "    fieldname: fieldname,",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "    originalname: filename,",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    name: newFilename,",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "    encoding: encoding,",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "    mimetype: mimetype,",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "    path: path,",
                        "lineNumber": 70,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    path: newFilePath,",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "    extension: ext.replace('.', '')",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "  };",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // trigger \"file upload start\" event",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onFileUploadStart) { options.onFileUploadStart(file); }",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var ws = fs.createWriteStream(path);",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fileStream.pipe(ws);",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fileStream.on('data', function(data) {",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    // trigger \"file data\" event",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (options.onFileUploadData) { options.onFileUploadData(file, data); }",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "  req.files[fieldname] = file;",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // trigger \"file end\" event",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onFileUploadComplete) { options.onFileUploadComplete(file); }",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "fileStream.on('error', function(error) {",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // trigger \"file error\" event",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onError) { options.onError(error, next); }",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else next(error);",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "ws.on('error', function(error) {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // trigger \"file error\" event",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onError) { options.onError(error, next); }",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "  else next(error);",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "busboy.on('partsLimit', function() {",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onPartsLimit) { options.onPartsLimit(); }",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "busboy.on('filesLimit', function() {",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onFilesLimit) { options.onFilesLimit(); }",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "busboy.on('fieldsLimit', function() {",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onFieldsLimit) { options.onFieldsLimit(); }",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "busboy.on('end', function() {",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // when done parsing the form, pass the control to the next middleware in stack",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (options.onParseEnd) { options.onParseEnd(); }",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "  next();",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 125,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Apress/Practical-Bot-Development/commit/c8eb653ba3018f9f52be0208b8c607fce9ccde8d?diff=split#diff-d85f7118c5842989a3ba9f47d1d58a44L10",
                    "lines": [
                      {
                        "line": " const _ = require('underscore');",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "const md5 = require('md5');",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const BingSpeechClient = require('bingspeech-api-client').BingSpeechClient;",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const fs = require('fs');",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const path = require('path');",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "const twilio = require('twilio');",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": " });",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "const bing = new BingSpeechClient(process.env.MICROSOFT_BING_SPEECH_KEY);",
                        "lineNumber": 71,
                        "lineChange": "removed"
                      },
                      {
                        "line": "function generateAudio (text) {",
                        "lineNumber": 72,
                        "lineChange": "removed"
                      },
                      {
                        "line": "function generateAudio(text) {",
                        "lineNumber": 74,
                        "lineChange": "added"
                      },
                      {
                        "line": "    const id = md5(text);",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    const file = 'public\\\\audio\\\\' + id + '.wav';",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    const file = path.join('public', 'audio', id + '.wav');",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "    const resultingUri = process.env.BASE_URI + '/audio/' + id + '.wav';",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fs.existsSync('public')) fs.mkdirSync('public');",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!fs.existsSync('public/audio')) fs.mkdirSync('public/audio');",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (fs.existsSync(file)) {",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Promise.resolve(resultingUri);",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return bing.synthesize(text).then(result => {",
                        "lineNumber": 84,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        const wstream = fs.createWriteStream(file);",
                        "lineNumber": 85,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        wstream.write(result.wave);",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    const t = textToSpeech(process.env.SPEECH_SERVICE_KEY, saveAudio, text, file);",
                        "lineNumber": 86,
                        "lineChange": "added"
                      },
                      {
                        "line": "console.log('created %s', resultingUri);",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 257,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.post('/api/voice/gather', (req, res, next) => {",
                        "lineNumber": 259,
                        "lineChange": "none"
                      },
                      {
                        "line": "    const input = req.body.SpeechResult;",
                        "lineNumber": 260,
                        "lineChange": "none"
                      },
                      {
                        "line": "    let userId = req.body.Caller;",
                        "lineNumber": 261,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log('user id: %s | input: %s', userId, input);",
                        "lineNumber": 262,
                        "lineChange": "none"
                      },
                      {
                        "line": "    let conv = cachedConversations[userId];",
                        "lineNumber": 263,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log('got convo: %j', conv);",
                        "lineNumber": 264,
                        "lineChange": "none"
                      },
                      {
                        "line": "    conv.lastAccessed = moment().format();",
                        "lineNumber": 265,
                        "lineChange": "none"
                      },
                      {
                        "line": "    postActivity(process.env.DL_KEY, conv.id, {",
                        "lineNumber": 267,
                        "lineChange": "none"
                      },
                      {
                        "line": "        from: { id: userId, name: userId }, // required (from.name is optional)",
                        "lineNumber": 268,
                        "lineChange": "none"
                      },
                      {
                        "line": "        type: 'message',",
                        "lineNumber": 269,
                        "lineChange": "none"
                      },
                      {
                        "line": "let interval = setInterval(function () {",
                        "lineNumber": 275,
                        "lineChange": "none"
                      },
                      {
                        "line": "    console.log('getting activities...');",
                        "lineNumber": 276,
                        "lineChange": "none"
                      },
                      {
                        "line": "    getActivities(process.env.DL_KEY, conv.id, conv.watermark).then(activitiesResponse => {",
                        "lineNumber": 277,
                        "lineChange": "none"
                      },
                      {
                        "line": "        console.log('%j', activitiesResponse);",
                        "lineNumber": 278,
                        "lineChange": "none"
                      },
                      {
                        "line": "        let temp = _.filter(activitiesResponse.activities, (m) => m.from.id !== userId);",
                        "lineNumber": 279,
                        "lineChange": "none"
                      },
                      {
                        "line": "        if (temp.length > 0) {",
                        "lineNumber": 280,
                        "lineChange": "none"
                      },
                      {
                        "line": "            clearInterval(interval);",
                        "lineNumber": 281,
                        "lineChange": "none"
                      },
                      {
                        "line": "            let responseActivity = temp[0];",
                        "lineNumber": 282,
                        "lineChange": "none"
                      },
                      {
                        "line": "            console.log('got response %j', responseActivity);",
                        "lineNumber": 283,
                        "lineChange": "none"
                      },
                      {
                        "line": "            conv.watermark = activitiesResponse.watermark;",
                        "lineNumber": 285,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (responseActivity.channelData && responseActivity.channelData.hangup) {",
                        "lineNumber": 286,
                        "lineChange": "none"
                      },
                      {
                        "line": "                buildAndSendHangup(req, res, next);",
                        "lineNumber": 287,
                        "lineChange": "none"
                      },
                      {
                        "line": "            } else {",
                        "lineNumber": 288,
                        "lineChange": "none"
                      },
                      {
                        "line": "                buildAndSendTwimlResponse(req, res, next, userId, responseActivity.speak);",
                        "lineNumber": 289,
                        "lineChange": "none"
                      },
                      {
                        "line": "                conv.lastAccessed = moment().format();",
                        "lineNumber": 290,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }",
                        "lineNumber": 291,
                        "lineChange": "none"
                      },
                      {
                        "line": "        } else {",
                        "lineNumber": 292,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 318,
                        "lineChange": "none"
                      },
                      {
                        "line": "function buildAndSendTwimlResponse (req, res, next, userId, text) {",
                        "lineNumber": 247,
                        "lineChange": "removed"
                      },
                      {
                        "line": "function buildAndSendTwimlResponse(req, res, next, userId, text) {",
                        "lineNumber": 320,
                        "lineChange": "added"
                      },
                      {
                        "line": "    const twiml = new VoiceResponse();",
                        "lineNumber": 321,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Promise.all(",
                        "lineNumber": 323,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [",
                        "lineNumber": 324,
                        "lineChange": "none"
                      },
                      {
                        "line": "            generateAudio(text),",
                        "lineNumber": 325,
                        "lineChange": "none"
                      },
                      {
                        "line": "            generateAudio('I didn\\'t quite catch that. Please try again.'),",
                        "lineNumber": 326,
                        "lineChange": "none"
                      },
                      {
                        "line": "            generateAudio('Ok, call back anytime!')]).then(",
                        "lineNumber": 327,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 378,
                        "lineChange": "none"
                      },
                      {
                        "line": "function postActivity (token, conversationId, activity) {",
                        "lineNumber": 307,
                        "lineChange": "removed"
                      },
                      {
                        "line": "function postActivity(token, conversationId, activity) {",
                        "lineNumber": 380,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // POST to conversations endpoint",
                        "lineNumber": 381,
                        "lineChange": "none"
                      },
                      {
                        "line": "    const url = conversations + '/' + conversationId + '/activities';",
                        "lineNumber": 382,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return new Promise((resolve, reject) => {",
                        "lineNumber": 383,
                        "lineChange": "none"
                      },
                      {
                        "line": "        let client = restify.createJsonClient({",
                        "lineNumber": 384,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 403,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getActivities (token, conversationId, watermark) {",
                        "lineNumber": 332,
                        "lineChange": "removed"
                      },
                      {
                        "line": "function getActivities(token, conversationId, watermark) {",
                        "lineNumber": 405,
                        "lineChange": "added"
                      },
                      {
                        "line": "    // GET activities from conversations endpoint",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "    let url = conversations + '/' + conversationId + '/activities';",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (watermark) {",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "        url = url + '?watermark=' + watermark;",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 410,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pmlrsg/GISportal/commit/fad9898ea089b27587d9d900f21bc6178339df28?diff=split#diff-f5e5ca4fece755c178daa72c2fd9625cL7",
                    "lines": [
                      {
                        "line": " ffmpeg.setFfmpegPath(ffmpegPath);",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "var express = require('express');",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var fs = require('fs');",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var fs = require('fs-extra');",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "var request = require('request');",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "var url = require('url');",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "module.exports = router;",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "module.exports = animation;",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "router.use('/app/animate', function(req, res) {",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   res.send('Processing');",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "animation.animate = function(options) {",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "   console.log('Animation called');",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "   var id = req.body.id;",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   var wmsURL = req.body.url;",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   var params = req.body.params;",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   var slices = req.body.slices;",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   var width = 1024;",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "var mapURL = 'https://tiles.maps.eox.at/wms/?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&FORMAT=image%2Fpng&TRANSPARENT=true&LAYERS=terrain-light&SRS=EPSG%3A4326&wrapDateLine=true&WIDTH=1024&HEIGHT=51",
                        "lineNumber": 22,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "var dataOptions = options.plot.data.series[0].data_source;",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "var id = dataOptions.layer_id;",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "var wmsUrl = dataOptions.wmsUrl;",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "var params = dataOptions.wmsParams;",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "var slices = dataOptions.timesSlices;",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "var mapUrl = url.parse(mapOptions.wmsUrl);",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (var i = 0; i < slices.length; i++) {",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "   dataURL.query.TIME = slices[i];",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "   var filename = '/tmp/' + id + '_' + slices[i] + '.png';",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "   download(url.format(dataURL), filename, downloadComplete);",
                        "lineNumber": 67,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   download(url.format(dataURL), filename, slices[i], downloadComplete);",
                        "lineNumber": 122,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 109,
                        "lineChange": "removed"
                      },
                      {
                        "line": " ",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "function download(url, filename, callback) {",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "   request(url).pipe(fs.createWriteStream(filename))",
                        "lineNumber": 112,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      .on('error', function(err) {",
                        "lineNumber": 113,
                        "lineChange": "removed"
                      },
                      {
                        "line": "         callback(err, filename);",
                        "lineNumber": 114,
                        "lineChange": "removed"
                      },
                      {
                        "line": "};",
                        "lineNumber": 201,
                        "lineChange": "added"
                      },
                      {
                        "line": "function download(uri, filename, id, callback) {",
                        "lineNumber": 203,
                        "lineChange": "added"
                      },
                      {
                        "line": "   console.log('Downloading ' + id);",
                        "lineNumber": 204,
                        "lineChange": "added"
                      },
                      {
                        "line": "   request(uri, {",
                        "lineNumber": 205,
                        "lineChange": "added"
                      },
                      {
                        "line": " })",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": ".on('error', done)",
                        "lineNumber": 208,
                        "lineChange": "added"
                      },
                      {
                        "line": ".pipe(fs.createWriteStream(filename))",
                        "lineNumber": 209,
                        "lineChange": "added"
                      },
                      {
                        "line": ".on('error', done)",
                        "lineNumber": 210,
                        "lineChange": "added"
                      },
                      {
                        "line": ".on('close', done);",
                        "lineNumber": 211,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Add checking output files to prerender tests",
                  "cleaning out unused modules;",
                  "* [xdl][exp] Add `exp test` command to let us test xdl schemas locally easily"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "javascript/CodeInjection",
              "name": "CodeInjection",
              "shortDescription": {
                "text": "Code Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA code injection attack occurs when the attacker exploits an existing input processing vulnerability, passing special characters and code directly to a web-based application or site. The code is then executed, potentially granting the user system access to export sensitive data, to install malware, or even to move laterally and to exploit other systems in the trusted internal network environment. While code injection attacks can take place in several ways, the common factor is allowing the user to submit executable code to the application. The most common forms of code injection are SQL injection (server side) and cross-site scripting (XSS) (client side).\n\n### Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Apply least privilege principle (for example, limit users to read only wherever possible).\n- Avoid passing raw user input directly to functions; use parameterized queries to extract data first.\n- Sanitize user input strings of special characters such as `?`, `&`, `/`, `<`, `>`, and quotation marks.\n- Use whitelisting of known good values.\n- Validate user input against expected response types.\n- Escape shell commands with functions such as shlex for Python, or escapeshellarg for PHP.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities so these cannot be exploited by code injection.\n- Educate all team members on safe data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "bug",
                  "eval",
                  "support",
                  "file"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/socketio/engine.io/commit/8ede274e05e849991f5ab0703ac4c49c4cb8f07f?diff=split#diff-ef1f6e965fb25234272c2da9afd6163dR11",
                    "lines": [
                      {
                        "line": "var listen = require('./common').listen;",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "var expect = require('expect.js');",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "var request = require('superagent');",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": " var WebSocket = require('ws');",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "script.__defineSetter__('src', function (uri) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  request.get(uri).end(function(res) {",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    eval(res.text);",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  });",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 37,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nonowarn/content-script-with-requirejs/commit/ab5c64b69dac02adf185e8b22830a964da2c2407?diff=split#diff-e64bcf4a11bb80e854ea0c300143e2edL3",
                    "lines": [
                      {
                        "line": "require.load = function (context, moduleName, url) {",
                        "lineNumber": 1,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var xhr = new XMLHttpRequest();",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  var xhr = new XMLHttpRequest(),",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "      evalResponseText = function(xhr) {",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "        eval(xhr.responseText);",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "        context.completeLoad(moduleName);",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "      };",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "xhr.open(\"GET\", url, true);",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "xhr.onreadystatechange = function (e) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (xhr.readyState === 4 && xhr.status === 200) {",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "    eval(xhr.responseText);",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    context.completeLoad(moduleName)",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": " }",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "};",
                        "lineNumber": 15,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/binaryage/dirac/commit/b6f5260cf2b8e97205c27542e399700e5251cca5?diff=split#diff-61026ba6de0b9ac934d1bb525be8a30cL1469",
                    "lines": [
                      {
                        "line": "    if (_importedScripts[scriptName])",
                        "lineNumber": 1466,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return;",
                        "lineNumber": 1467,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var xhr = new XMLHttpRequest();",
                        "lineNumber": 1468,
                        "lineChange": "none"
                      },
                      {
                        "line": "    _importedScripts[scriptName] = true;",
                        "lineNumber": 1469,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xhr.open(\"GET\", scriptName, false);",
                        "lineNumber": 1470,
                        "lineChange": "none"
                      },
                      {
                        "line": "    xhr.send(null);",
                        "lineNumber": 1471,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!xhr.responseText)",
                        "lineNumber": 1472,
                        "lineChange": "none"
                      },
                      {
                        "line": "        throw \"empty response arrived for script '\" + scriptName + \"'\";",
                        "lineNumber": 1473,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var baseUrl = location.origin + location.pathname;",
                        "lineNumber": 1474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    baseUrl = baseUrl.substring(0, baseUrl.lastIndexOf(\"/\"));",
                        "lineNumber": 1475,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var sourceURL = baseUrl + \"/\" + scriptName;",
                        "lineNumber": 1476,
                        "lineChange": "none"
                      },
                      {
                        "line": "    eval(xhr.responseText + \"\\n//# sourceURL=\" + sourceURL);",
                        "lineNumber": 1477,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    self.eval(xhr.responseText + \"\\n//# sourceURL=\" + sourceURL);",
                        "lineNumber": 1477,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 1478,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Eval scripts with correct 'this' setting",
                  "support for package.json in require() and other tweaks",
                  "fixes related to css and clearing Step.isRunning, added first Reporter test file"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-94"
                ]
              }
            },
            {
              "id": "javascript/Ssti",
              "name": "Ssti",
              "shortDescription": {
                "text": "Server-side Template Injection (SSTI)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "bug",
                  "react",
                  "ES6",
                  "audit"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/larrymyers/react-mini-router/commit/7ece2d1882067eb434b8d4eb9f19100485e3a0b4?diff=split#diff-5b213110525e91388422125e93ce7b0eL6",
                    "lines": [
                      {
                        "line": "express = require('express'),",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "bodyParser = require('body-parser'),",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "React = require('react'),",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "ReactDOMServer = require('react-dom/server'),",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "plates = require('plates'),",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "_find = require('lodash/collection/find'),",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.get('/lists*', renderApp);",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "function renderApp(req, res) {",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    var stores = {",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "        'TodoStore': new TodoStore({ lists: todoLists })",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "var flux = new Fluxxor.Flux(stores, require('./app/actions'));",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "var appHtml = React.renderToString(App({ path: req.path, flux: flux }));",
                        "lineNumber": 54,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var appHtml = ReactDOMServer.renderToString(App({ path: req.path, flux: flux }));",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "fs.readFile(",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bipbop/harlan/commit/f7f1a10756926787b42e11dbf47f848da36ff799?diff=split#diff-aad26a354c69662c1c80143889e9604cL5",
                    "lines": [
                      {
                        "line": "const Templates = function () {",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "    this.render = function (path, view, callback) {",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        return $.get('templates/' + path + '.tpl', function (data) {",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            callback(Mustache.render(data, view));",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        });",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    };",
                        "lineNumber": 7,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    this.render = (path, view, callback) => $.get(`templates/${path}.tpl`, data => {",
                        "lineNumber": 3,
                        "lineChange": "added"
                      },
                      {
                        "line": "        callback(Mustache.render(data, view));",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "};",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 9,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/OmarIthawi/arabic-mathjax/commit/08baac43892b5a401be2524f01999a73d8489577?diff=split#diff-5f34d6fd428013b64e432638e3e0378fL2",
                    "lines": [
                      {
                        "line": "jQuery(function($) {",
                        "lineNumber": 1,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    $.get('equations.html', function(template) {",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        var rendered = Mustache.render(template, {",
                        "lineNumber": 3,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            equations: EQUATIONS",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        });",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var renderEquations = function () {",
                        "lineNumber": 1,
                        "lineChange": "added"
                      },
                      {
                        "line": "  var $ = jQuery;",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": " ",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "  $.get('equations.html', function (template) {",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "    var rendered = Mustache.render(template, {",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "      equations: EQUATIONS",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "    });",
                        "lineNumber": 7,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Home page updated to ES6 React styling",
                  "Also update all Jest tests to use ES6 and Enzyme.",
                  "* File audit component"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-96"
                ]
              }
            },
            {
              "id": "javascript/reDOS",
              "name": "reDOS",
              "shortDescription": {
                "text": "Regular Expression Denial of Service (ReDoS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet's take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn't match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "servernode",
                  "route",
                  "router"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ToManage/TM-CRM_ERP/commit/d8869b82d90ec068552d3b01e20f3f7e36e8ec76?diff=split#diff-b7095dc6f2419facadbce3209c03e25eL2075",
                    "lines": [
                      {
                        "line": "if (self.req.query.filter) {",
                        "lineNumber": 2072,
                        "lineChange": "none"
                      },
                      {
                        "line": "    query.$or = [{",
                        "lineNumber": 2073,
                        "lineChange": "none"
                      },
                      {
                        "line": "        name: new RegExp(req.query.filter, \"gi\")",
                        "lineNumber": 2074,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        name: new RegExp(self.query.filter, \"gi\")",
                        "lineNumber": 2058,
                        "lineChange": "added"
                      },
                      {
                        "line": "    }, {",
                        "lineNumber": 2075,
                        "lineChange": "none"
                      },
                      {
                        "line": "        code_client: new RegExp(req.query.filter, \"gi\")",
                        "lineNumber": 2076,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        code_client: new RegExp(self.query.filter, \"gi\")",
                        "lineNumber": 2060,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/opencollective/opencollective-website/commit/402eecad019448906f2b8759001fb8079042ba59?diff=split#diff-cdb7538662cc6be4ed27585192b73a72L140",
                    "lines": [
                      {
                        "line": "},",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "badge: (req, res) => {",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const tier = req.params.tier;",
                        "lineNumber": 140,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  const { tier } = req.params;",
                        "lineNumber": 140,
                        "lineChange": "added"
                      },
                      {
                        "line": "  const color = req.query.color || 'brightgreen';",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const style = req.query.style;",
                        "lineNumber": 142,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  const { style } = req.query;",
                        "lineNumber": 142,
                        "lineChange": "added"
                      },
                      {
                        "line": "  const validator = (user) => (user.tier && user.tier.match(new RegExp(tier.replace(/s$/,''), 'i')));",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const users = _.uniq(filterCollection(req.users, validator), 'id');",
                        "lineNumber": 145,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jedireza/aqua/commit/59b36a823148bba6681a79bc98ee413c91848c32?diff=split#diff-1d2b1b0a2aefab2f44a3442bf81814aaL36",
                    "lines": [
                      {
                        "line": "    }",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "},",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "handler: function (request, reply) {",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "const query = {};",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (request.query.pivot) {",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "    query.pivot = new RegExp('^.*?' + EscapeRegExp(request.query.pivot) + '.*$', 'i');",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    query.pivot = { $like: '%' + request.query.pivot + '%' };",
                        "lineNumber": 36,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "if (request.query.name) {",
                        "lineNumber": 41,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Improved VFS permission check\n10b77fc Updated unit tests\n99962a5 server-node:",
                  "new file for route match request logic ()",
                  "Router - fix components cache"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-400"
                ]
              }
            },
            {
              "id": "javascript/PrototypePollution",
              "name": "PrototypePollution",
              "shortDescription": {
                "text": "Prototype Pollution"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n\n-   Property definition by path\n\n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>\n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \"path\", they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n\n-   Web server\n\n\n## How to prevent\n\n1.  Freeze the prototype - use `Object.freeze (Object.prototype)`.\n\n2.  Require schema validation of JSON input.\n\n3.  Avoid using unsafe recursive merge functions.\n\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n\n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \"JavaScript prototype pollution attack in NodeJS application.\" GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "tests",
                  "support",
                  "file"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/UnicornTranscoder/UnicornTranscoder/commit/340f3ac0b8e056a58a9f154ef07b694782aa65e9?diff=split#diff-f3b19462c4dd938f49bcffa16ec42679L13",
                    "lines": [
                      {
                        "line": "let m3u8 = {};",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "m3u8.serve = function (req, res) {",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "    debug('M3U8 ' + req.params.sessionId);",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    cache[req.params.sessionId] = new Transcoder(req.params.sessionId, req.url, res);",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    universal.cache[req.params.sessionId] = new Transcoder(req.params.sessionId, req.url, res);",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "};",
                        "lineNumber": 15,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/trainline/environment-manager/commit/3e3fda6c36602118bfc020daf2ba75930748daf4?diff=split#diff-17bbf95ed2fdc68976707b9754d36a68L6",
                    "lines": [
                      {
                        "line": "'use strict';",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "module.exports = function RequestData(request) {",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "  let data;",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "let dataFromRequest = {};",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (let property in request.query) {",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  dataFromRequest[property.toLowerCase()] = request.query[property];",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if ({}.hasOwnProperty.call(request.query, property)) {",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "    dataFromRequest[property.toLowerCase()] = request.query[property];",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 20,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/koopjs/koop-provider-agol/commit/6b36ec51f8848ed49ad8c461f0d9563ee36cb8d6?diff=split#diff-06ab2e25987c55ab1223758f0a1bb98aL120",
                    "lines": [
                      {
                        "line": "// find the items data ",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "controller.findItemData = function(req, res){",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var self = this;",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "  // closure that actually goes out gets the data",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "// sort the req.query before we hash so we are consistent ",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "var sorted_query = {};",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "_(req.query).keys().sort().each(function (key) {",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (key != 'url_only'){",
                        "lineNumber": 165,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (key != 'url_only' || key != 'format'){",
                        "lineNumber": 165,
                        "lineChange": "added"
                      },
                      {
                        "line": "    sorted_query[key] = req.query[key];",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 168,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "add more api tests",
                  "support for new config, simplify tests",
                  "add file:// urls support"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-1321"
                ]
              }
            },
            {
              "id": "javascript/UseCsurfForExpress",
              "name": "UseCsurfForExpress",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, hackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, hackers can then make changes to or even take down the app itself.\n\n### Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "express",
                  "server",
                  "CSRF"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/eclipse/orion.client/commit/ad8f3bce33a1ea9d1e2144e6c42f075ad25829d6?diff=split#diff-16594450dc1f06f7d9cf4a47859cfa52L175",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "return express()",
                        "lineNumber": 174,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return express.Router()",
                        "lineNumber": 174,
                        "lineChange": "added"
                      },
                      {
                        "line": ".use(bodyParser.json())",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": ".use(resource(workspaceRoot, {",
                        "lineNumber": 176,
                        "lineChange": "removed"
                      },
                      {
                        "line": ".use(apiPath(root))",
                        "lineNumber": 176,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/flowgrammable/flowsim/commit/1681245625230c6d71e1e74b0ada6551cbf2d935?diff=split#diff-4cb60403ef79ea471c0c046e9873a1e2L6",
                    "lines": [
                      {
                        "line": "var cookieSession = require('cookie-session');",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "express()",
                        "lineNumber": 5,
                        "lineChange": "removed"
                      },
                      {
                        "line": "connect()",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .use(cookieParser())",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .use(cookieSession({ secret: 'testsecret' }))",
                        "lineNumber": 7,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/staticdeploy/staticdeploy/commit/177e64efa883d980ce1c18ad6697364c6aa8d3d9?diff=split#diff-480a70fa6d6756e3b9c0050c38031b56L34",
                    "lines": [
                      {
                        "line": "} = options;",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "return express().use([",
                        "lineNumber": 33,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    bunyanMiddleware({",
                        "lineNumber": 34,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        logger: logger,",
                        "lineNumber": 35,
                        "lineChange": "removed"
                      },
                      {
                        "line": "return express()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .disable(\"x-powered-by\")",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "    .use([",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test without express",
                  "/server tests ()",
                  "Added CSRF support"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "javascript/HttpToHttps",
              "name": "HttpToHttps",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Hackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "http"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Rocket1184/qq-bot-rebown/commit/5255a8398cf1d80f60e182c53e8532c7562e76c2?diff=split#diff-62a4be7247c4abe75f2cc11746422b86L12",
                    "lines": [
                      {
                        "line": "'use strict';",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require('http');",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require('https');",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "function http2https(link) {",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " ",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "function shortenUrl(url) {",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/qmachine/qmachine/commit/1f9f08b5b1f9be78dd6625d93ec934befb255df7?diff=split#diff-54387be96a26d96583a0c7585e8607c5L56",
                    "lines": [
                      {
                        "line": "};",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "http = require('http');",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https = require('https');",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "http_GET = function (x) {",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https_GET = function (x) {",
                        "lineNumber": 61,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vmware-samples/vmware-blockchain-samples/commit/92bf99244de7b145eb4b22e36575d9fef376600b?diff=split#diff-21a000feb5ae912714215842b628c63cL3",
                    "lines": [
                      {
                        "line": "const fs = require(\"fs\");",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require(\"http\");",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require(\"https\");",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "verifyMigrations();",
                        "lineNumber": 10,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added https imposter tests;"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "javascript/HardcodedNonCryptoSecret",
              "name": "HardcodedNonCryptoSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hard-coded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hard-coded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hard-coded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "secret",
                  "config",
                  "session"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/krakenjs/lusca/commit/a871c0a7f2b6641fb882d2b902b0910f6ac60b7b?diff=split#diff-398ed3b014436a5204583323ea29320bL7",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "var crypto = require('crypto');",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "var SECRET = '_csrfSecret';",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var SECRET;",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "var LENGTH = 10;",
                        "lineNumber": 7,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TokenChingy/_api/commit/106bf1ec05469fe2de95798103053633460e114e?diff=split#diff-616fbd4ce6b2e7c62d261950deac3266L5",
                    "lines": [
                      {
                        "line": "const DB_CONFIG = {",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "  LOCATION: 'src/collections',",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "  SECRET: 'MY_SUPER_SECRET_KEY',",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SECRET: '',",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "  COLLECTIONS: [",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {",
                        "lineNumber": 6,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/spacecloud-io/space-cloud/commit/5aefde98ebe6d5c79b75bd1155cc620d0dae1b47?diff=split#diff-e70f3fa4bf814493fc8e99f3b7fb54c6L116",
                    "lines": [
                      {
                        "line": "name: name,",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "id: generateProjectId(name),",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "secret: 'some-secret',",
                        "lineNumber": 115,
                        "lineChange": "removed"
                      },
                      {
                        "line": "secret: generateId(),",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "modules: {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  crud: {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Update tests so dev's can run without secret ()",
                  "use config for tests",
                  "More session support"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "javascript/NoHardcodedCredentials/test",
              "name": "NoHardcodedCredentials/test",
              "shortDescription": {
                "text": "Use of Hard-coded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "tests",
                  "user",
                  "login"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Ionaru/EVIE/commit/8ea66c18513bd32f2e12b0c6309740d625e9f7b1?diff=split#diff-485ab47f246475f4d8bddcb3bd06a1adL39",
                    "lines": [
                      {
                        "line": "let url = 'api/login';",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "return this.http.post(url, {",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  username: 'testUser',",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  password: '000999888',",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  username: username,",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "  password: password,",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "}).map(",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  (res: Response) => {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vczero/React-Native-App/commit/955b4371c18bf96311a4e00a322cbed64f961356?diff=split#diff-7bb3393075582904007e5adb67e2ce05L131",
                    "lines": [
                      {
                        "line": "AdSupportIOS.getAdvertisingTrackingEnabled(function(){",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  AdSupportIOS.getAdvertisingId(function(deviceId){",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Util.post(path, {",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "      email: 'wlhmyit@126.com',",
                        "lineNumber": 131,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      password: '123456',",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      email: email,",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "      password: password,",
                        "lineNumber": 132,
                        "lineChange": "added"
                      },
                      {
                        "line": "      deviceId: deviceId,",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }, function(data){",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/sensebox/openSenseMap-API/commit/94e9f56a0f8ab97d3aa0b9450218c65d1566d8e0?diff=split#diff-271b654259ad4f9dd2608de301f69260R10",
                    "lines": [
                      {
                        "line": "   expect = chakram.expect;",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const BASE_URL = 'http://localhost:8000',",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "  valid_user = { email: 'luftdaten@email', password: '87654321' };",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "describe('openSenseMap API Delete User tests', function () {",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "  expect(response).to.have.status(200);",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return chakram.post(`${BASE_URL}/users/sign-in`, { email: 'tester2@test.test', password: '12345678910' });",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return chakram.post(`${BASE_URL}/users/sign-in`, valid_user);",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "})",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": ".then(function (response) {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "get users test",
                  "updated login unit test"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "javascript/NoHardcodedPasswords/test",
              "name": "NoHardcodedPasswords/test",
              "shortDescription": {
                "text": "Use of Hard-coded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "usability",
                  "room",
                  "mock"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Ionaru/EVIE/commit/8ea66c18513bd32f2e12b0c6309740d625e9f7b1?diff=split#diff-485ab47f246475f4d8bddcb3bd06a1adL39",
                    "lines": [
                      {
                        "line": "let url = 'api/login';",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "return this.http.post(url, {",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  username: 'testUser',",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  password: '000999888',",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  username: username,",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "  password: password,",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "}).map(",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "  (res: Response) => {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vczero/React-Native-App/commit/955b4371c18bf96311a4e00a322cbed64f961356?diff=split#diff-7bb3393075582904007e5adb67e2ce05L131",
                    "lines": [
                      {
                        "line": "AdSupportIOS.getAdvertisingTrackingEnabled(function(){",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "  AdSupportIOS.getAdvertisingId(function(deviceId){",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "    Util.post(path, {",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "      email: 'wlhmyit@126.com',",
                        "lineNumber": 131,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      password: '123456',",
                        "lineNumber": 132,
                        "lineChange": "removed"
                      },
                      {
                        "line": "      email: email,",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "      password: password,",
                        "lineNumber": 132,
                        "lineChange": "added"
                      },
                      {
                        "line": "      deviceId: deviceId,",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }, function(data){",
                        "lineNumber": 134,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/sensebox/openSenseMap-API/commit/94e9f56a0f8ab97d3aa0b9450218c65d1566d8e0?diff=split#diff-271b654259ad4f9dd2608de301f69260R10",
                    "lines": [
                      {
                        "line": "   expect = chakram.expect;",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const BASE_URL = 'http://localhost:8000',",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "  valid_user = { email: 'luftdaten@email', password: '87654321' };",
                        "lineNumber": 9,
                        "lineChange": "added"
                      },
                      {
                        "line": "describe('openSenseMap API Delete User tests', function () {",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "  expect(response).to.have.status(200);",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return chakram.post(`${BASE_URL}/users/sign-in`, { email: 'tester2@test.test', password: '12345678910' });",
                        "lineNumber": 64,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return chakram.post(`${BASE_URL}/users/sign-in`, valid_user);",
                        "lineNumber": 65,
                        "lineChange": "added"
                      },
                      {
                        "line": "})",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": ".then(function (response) {",
                        "lineNumber": 67,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- Join room e2e tests added",
                  "Mock api() tests"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            },
            {
              "id": "javascript/HardcodedSecret/test",
              "name": "HardcodedSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hard-coded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hard-coded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hard-coded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "upgrade",
                  "encryption",
                  "crypto"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/bcoin-org/bcoin-native/commit/dffb99829b4baec70c54ec4e30b0d40567a22080?diff=split#diff-bf2f25928a0b46d29e7743d11b05f999L39",
                    "lines": [
                      {
                        "line": "function sha256hmac(data, salt) {",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var hmac = crypto.createHmac('sha256', salt);",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return hmac.update(data).digest();",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "  b[i] = i & 0xff;",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "var k = new Buffer(40);",
                        "lineNumber": 143,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var k = Buffer.allocUnsafe(40);",
                        "lineNumber": 143,
                        "lineChange": "added"
                      },
                      {
                        "line": "for (var i = 0; i < k.length; i++)",
                        "lineNumber": 145,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/avwo/whistle/commit/bb59559e78e204ff77e28cfa3a4854d6b8803dc8?diff=split#diff-9a274f6a23e091c485d7909a10423cc6L570",
                    "lines": [
                      {
                        "line": "var clientId = [hostname, os.platform(), os.release(),",
                        "lineNumber": 567,
                        "lineChange": "none"
                      },
                      {
                        "line": "  os.arch(), cpus.length, cpus[0] && cpus[0].model, config.clientId];",
                        "lineNumber": 568,
                        "lineChange": "none"
                      },
                      {
                        "line": "clientId = config.clientId = crypto.createHmac('sha256', 'x-whistle-client-id')",
                        "lineNumber": 569,
                        "lineChange": "removed"
                      },
                      {
                        "line": "clientId = config.clientId = crypto.createHmac('sha256', config.CLIENT_ID_HEADER)",
                        "lineNumber": 569,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .update(clientId.join('\\r\\n')).digest('hex');",
                        "lineNumber": 570,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/reimagined/resolve/commit/540a4543324f2ad0702546e456efcdcba2cafce6?diff=split#diff-e91cff9d126cc964c3332c6154811f20R91",
                    "lines": [
                      {
                        "line": "export const createToken = (",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": " { config: { deploymentId, secretKey } },",
                        "lineNumber": 90,
                        "lineChange": "added"
                      },
                      {
                        "line": "  { dir, expireTime }",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": ") => {",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .replace(/=/g, '')",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "const signature = crypto",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .createHmac('md5', 'key')",
                        "lineNumber": 111,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  .createHmac('md5', secretKey)",
                        "lineNumber": 104,
                        "lineChange": "added"
                      },
                      {
                        "line": "  .update(payload)",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "  .digest('hex')",
                        "lineNumber": 113,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Adjusted utilities to handle Bitcoin Core-style encrypted master keys.",
                  "* Harden crypto"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "javascript/HardcodedNonCryptoSecret/test",
              "name": "HardcodedNonCryptoSecret/test",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hard-coded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hard-coded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hard-coded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n### Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "secret",
                  "config",
                  "session"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/krakenjs/lusca/commit/a871c0a7f2b6641fb882d2b902b0910f6ac60b7b?diff=split#diff-398ed3b014436a5204583323ea29320bL7",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "var crypto = require('crypto');",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "var SECRET = '_csrfSecret';",
                        "lineNumber": 6,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var SECRET;",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "var LENGTH = 10;",
                        "lineNumber": 7,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/TokenChingy/_api/commit/106bf1ec05469fe2de95798103053633460e114e?diff=split#diff-616fbd4ce6b2e7c62d261950deac3266L5",
                    "lines": [
                      {
                        "line": "const DB_CONFIG = {",
                        "lineNumber": 2,
                        "lineChange": "none"
                      },
                      {
                        "line": "  LOCATION: 'src/collections',",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "  SECRET: 'MY_SUPER_SECRET_KEY',",
                        "lineNumber": 4,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  SECRET: '',",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "  COLLECTIONS: [",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {",
                        "lineNumber": 6,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/spacecloud-io/space-cloud/commit/5aefde98ebe6d5c79b75bd1155cc620d0dae1b47?diff=split#diff-e70f3fa4bf814493fc8e99f3b7fb54c6L116",
                    "lines": [
                      {
                        "line": "name: name,",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "id: generateProjectId(name),",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "secret: 'some-secret',",
                        "lineNumber": 115,
                        "lineChange": "removed"
                      },
                      {
                        "line": "secret: generateId(),",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "modules: {",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "  crud: {",
                        "lineNumber": 132,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Update tests so dev's can run without secret ()",
                  "use config for tests",
                  "More session support"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "javascript/HttpToHttps/test",
              "name": "HttpToHttps/test",
              "shortDescription": {
                "text": "Cleartext Transmission of Sensitive Information"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Hackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n### Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "http"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Rocket1184/qq-bot-rebown/commit/5255a8398cf1d80f60e182c53e8532c7562e76c2?diff=split#diff-62a4be7247c4abe75f2cc11746422b86L12",
                    "lines": [
                      {
                        "line": "'use strict';",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require('http');",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require('https');",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "function http2https(link) {",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": " ",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "function shortenUrl(url) {",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/qmachine/qmachine/commit/1f9f08b5b1f9be78dd6625d93ec934befb255df7?diff=split#diff-54387be96a26d96583a0c7585e8607c5L56",
                    "lines": [
                      {
                        "line": "};",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "http = require('http');",
                        "lineNumber": 55,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https = require('https');",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "http_GET = function (x) {",
                        "lineNumber": 57,
                        "lineChange": "removed"
                      },
                      {
                        "line": "https_GET = function (x) {",
                        "lineNumber": 61,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/vmware-samples/vmware-blockchain-samples/commit/92bf99244de7b145eb4b22e36575d9fef376600b?diff=split#diff-21a000feb5ae912714215842b628c63cL3",
                    "lines": [
                      {
                        "line": "const fs = require(\"fs\");",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const http = require(\"http\");",
                        "lineNumber": 2,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const https = require(\"https\");",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "verifyMigrations();",
                        "lineNumber": 10,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Added https imposter tests;"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-319"
                ]
              }
            },
            {
              "id": "javascript/Ssrf/test",
              "name": "Ssrf/test",
              "shortDescription": {
                "text": "Server-Side Request Forgery (SSRF)"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\nIn a server-side request forgery attack, a malicious user supplies a URL (an external URL or a network IP address such as 127.0.0.1) to the application's back end. The server then accesses the URL and shares its results, which may include sensitive information such as AWS metadata, internal configuration information, or database contents with the attacker. Because the request comes from the back end, it bypasses access controls, potentially exposing information the user does not have sufficient privileges to receive. The attacker can then exploit this information to gain access, modify the web application, or demand a ransom payment.\n\n### Best practices for prevention\n* Blacklists are problematic and hackers have numerous ways to bypass them; ideally, use a whitelist of all permitted domains and IP addresses.\n* Use authentication even within your own network to prevent exploitation of server-side requests.\n* Implement zero trust and sanitize and validate all URL and header data returning to the server from the user. Strip invalid or suspect characters, then inspect to be certain it contains a valid and expected value.\n* Ideally, avoid sending server requests based on user-provided data altogether.\n* Ensure that you are not sending raw response bodies from the server directly to the client. Only deliver expected responses.\n* Disable suspect and exploitable URL schemas. Common culprits include obscure and little-used schemas such as `file://`, `dict://`, `ftp://`, and `gopher://`.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "maintenance",
                  "request",
                  "tests",
                  "fetch"
                ],
                "categories": [
                  "Security",
                  "InTest"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/wellcometrust/wellcomecollection.org/commit/2399266a906b6573c32a18afacb7ef3a04cf61f6?diff=split#diff-d7a22ad952b0d3fd4f7e83234564f74bL28",
                    "lines": [
                      {
                        "line": "  ctx.throw('Error Message', 500);",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "r.get('/download', (ctx, next) => {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const uri = ctx.request.query.uri;",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ctx.body = request(uri);",
                        "lineNumber": 29,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if (uri.match('https://iiif.wellcomecollection.org')) {",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ctx.body = request(uri);",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "    ctx.throw('Invalid image host', 422);",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "});",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": " ",
                        "lineNumber": 35,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/panzhangwang/getAwesomeness/commit/33c61a6fa1bdeb45619062d6862cd5c29be3664e?diff=split#diff-d3e460adfa39fbcc2ef09245b23b11f5L47",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "exports.get = function (req, res){",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var awe = req.param('awe');",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var article = cache.get(awe);",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var found = awes[awe];",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (!found) return res.render('404');",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  processCookie(req, res);",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "request(found.url, function (error, response, body) {      ",
                        "lineNumber": 66,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var url = 'https://raw.githubusercontent.com' + found.repo + '/master/' + found.readme;",
                        "lineNumber": 67,
                        "lineChange": "added"
                      },
                      {
                        "line": "request(url, function (error, response, body) {   ",
                        "lineNumber": 69,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if (!error && response.statusCode == 200) {",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "    article = cacheGit(awe, found.start, found.end, body);",
                        "lineNumber": 71,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Sunbird-Ed/SunbirdEd-portal/commit/f3bda114eec89a817483828e039f346bd60370db?diff=split#diff-0cebc2a5e26b1c5edf21a87c789d2529L5",
                    "lines": [
                      {
                        "line": "const express = require('express')",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = express()",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "const proxy = require('express-http-proxy')",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "const Keycloak = require('keycloak-connect')",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(express.static(path.join(__dirname, '/')))",
                        "lineNumber": 385,
                        "lineChange": "none"
                      },
                      {
                        "line": "// app.use(express.static(path.join(__dirname, 'tenant', tenantId)))",
                        "lineNumber": 388,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.all('/:tenantName', function (req, res) {",
                        "lineNumber": 390,
                        "lineChange": "none"
                      },
                      {
                        "line": "  tenantId = req.params.tenantName",
                        "lineNumber": 391,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (_.isString(tenantId)) {",
                        "lineNumber": 392,
                        "lineChange": "none"
                      },
                      {
                        "line": "    tenantId = _.lowerCase(tenantId)",
                        "lineNumber": 393,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 394,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (tenantId) {",
                        "lineNumber": 395,
                        "lineChange": "none"
                      },
                      {
                        "line": "    renderTenantPage(res)",
                        "lineNumber": 396,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else if (defaultTenant) {",
                        "lineNumber": 397,
                        "lineChange": "none"
                      },
                      {
                        "line": "try{",
                        "lineNumber": 406,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(tenantCdnUrl){",
                        "lineNumber": 407,
                        "lineChange": "none"
                      },
                      {
                        "line": "    request(tenantCdnUrl + '/' + tenantsContainerName + '/' + tenantId + '/' +  'index.html' , function (error, response, body) {",
                        "lineNumber": 408,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(error || !body || response.statusCode !== 200){",
                        "lineNumber": 409,
                        "lineChange": "none"
                      },
                      {
                        "line": "          checkForFallbackOption(res)",
                        "lineNumber": 410,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "refactor request with tests, more auth wip",
                  "* actually add the new test file",
                  "added own server to fetch user data reliably"
                ],
                "precision": "very-high",
                "cwe": [
                  "CWE-918"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "SHA-1 hash (used in jssha) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[SHA-1](0)",
              "[jssha](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/lib/utils.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 18,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5afc9e26c23dd386dd29463503defde1516fd1022d256a0d646e0041b7dc7765",
            "1": "47d62eac.4773f344.2ff86584.d7919eeb.a21268d8.8c503821.4682c195.b8ef0081.47d62eac.4773f344.2ff86584.d7919eeb.a21268d8.8c503821.4682c195.b8ef0081"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/utils.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 28,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/utils.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 101,
                            "endLine": 101,
                            "startColumn": 18,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "md5 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[md5](0)",
              "[crypto.createHash](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/lib/insecurity.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 24,
                  "endColumn": 47
                }
              }
            }
          ],
          "fingerprints": {
            "0": "68ac49e5ee8761729962b4e3531c18f1b25cf0525d312feccfdb546aed5134d2",
            "1": "3df95e84.4773f344.191eaf2b.d9da6552.ef9f7d82.8020cfdf.7a8c7288.71520ffe.3df95e84.4773f344.191eaf2b.d9da6552.ef9f7d82.8020cfdf.7a8c7288.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 42,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 24,
                            "endColumn": 47
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "md5 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[md5](0)",
              "[crypto.createHash](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/Gruntfile.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 19,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "54e7bd25f8d4cd9743c4ccbc9edc158ff2fcc68c530fe720ab3897192932d467",
            "1": "37bc1bfe.d2255a1c.191eaf2b.d7919eeb.ef9f7d82.8020cfdf.cd61fc56.71520ffe.37bc1bfe.4773f344.191eaf2b.d7919eeb.ef9f7d82.8020cfdf.cd61fc56.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Gruntfile.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 37,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Gruntfile.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 73,
                            "endLine": 73,
                            "startColumn": 19,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/Ssrf",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from data from a remote resource flows into get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[data from a remote resource](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
              "[get](13)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/Services/configuration.service.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 31,
                  "endColumn": 43
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb384a9cc068c1acfceb446f05a859ceb6fb4db32837a56df0c72bec83962a58",
            "1": "7cc5e399.4773f344.909e54c5.515f1676.ef9f7d82.6ea327ba.ea235696.6b76493d.2d06e3d6.7d4b7307.fcc4cb9d.515f1676.47ffbb72.6ea327ba.609fad7a.5511c54a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 31,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 31,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 113,
                            "endColumn": 136
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 142,
                            "endColumn": 149
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 142,
                            "endColumn": 156
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 108,
                            "endColumn": 193
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 31,
                            "endColumn": 106
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 12,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 112,
                            "endLine": 112,
                            "startColumn": 14,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 61,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 61,
                            "endColumn": 100
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/Services/configuration.service.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 111,
                            "endLine": 111,
                            "startColumn": 31,
                            "endColumn": 43
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/Ssrf",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into request.get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[request.get](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/profileImageUrlUpload.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 30,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fb3a37f0809fcb7758bd65033a5580107bf54d42e59f7ebdd5908d6dfabc8c6a",
            "1": "dca15045.70dd3b3b.568208f0.d7919eeb.79a7d027.98c7c24d.df7e59ba.377cd288.6849fe68.70dd3b3b.568208f0.08906714.79a7d027.98c7c24d.83265159.a41fb358"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 13,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 16,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 30,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/ServerLeak",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "An error object flows to bypassSecurityTrustHtml and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "markdown": "{0} {1} to {2} and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "arguments": [
              "[An error object](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[bypassSecurityTrustHtml](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/administration/administration.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 28,
                  "endColumn": 65
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d1b40fef9e6cfaeee9a1a7cb13380a080ac85f8dc35a00dad7d21ac70e449042",
            "1": "7921a677.4773f344.607187b5.d7919eeb.ef9f7d82.81760a8a.566b8f28.cde67692.32defead.664e3b30.208e0134.4a954e56.3ea00232.9fa83ec1.dac55792.a75cce71"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 9,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 9,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 87,
                            "endLine": 87,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 95,
                            "endLine": 95,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 5,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 5,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 44,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 18,
                            "endColumn": 25
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 67,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 67,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/administration/administration.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 28,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/ServerLeak",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "An error object flows to bypassSecurityTrustHtml and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "markdown": "{0} {1} to {2} and is leaked to the attacker. This may disclose important information about the application to an attacker.",
            "arguments": [
              "[An error object](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)",
              "[bypassSecurityTrustHtml](16)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/data-export/data-export.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 22,
                  "endColumn": 59
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0db81527d9b5e06f800a21f075f137b2911552ddd0da6a4e95c57e40e343e599",
            "1": "3df95e84.4773f344.607187b5.74eb2808.ef9f7d82.8020cfdf.83265159.428468b6.70e06aa6.461f6a38.49eea598.2f9e311f.79a7d027.51429c53.9a2757f8.e6930396"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 63,
                            "endLine": 63,
                            "startColumn": 9,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 20,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 12,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 64,
                            "endLine": 64,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 65,
                            "endLine": 65,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 66,
                            "endLine": 66,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 81,
                            "endLine": 81,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 82,
                            "endLine": 82,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 5,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 54,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 61,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 61,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/data-export/data-export.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 59
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into bypassSecurityTrustHtml, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)",
              "[bypassSecurityTrustHtml](26)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/search-result/search-result.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 34,
                  "endColumn": 71
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4944d6d8d1d9e1dcea22dd7636177def9a41d40542ef1960b4384e543a912e29",
            "1": "7921a677.4773f344.607187b5.a517c54b.ef9f7d82.8020cfdf.df7e59ba.cde67692.cee1e251.664e3b30.c18d1bd4.98017144.fbac9e17.7d25c6fd.ca2eca62.058e99e2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 30,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 30,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 26,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 153,
                            "endLine": 153,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 155,
                            "endLine": 155,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 157,
                            "endLine": 157,
                            "startColumn": 11,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 99,
                            "endLine": 99,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 33,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 24,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 104,
                            "endLine": 104,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 118,
                            "endLine": 118,
                            "startColumn": 9,
                            "endColumn": 12
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 120,
                            "endLine": 120,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 7,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 70,
                            "endLine": 70,
                            "startColumn": 36,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 124,
                            "endLine": 124,
                            "startColumn": 28,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 25,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 73,
                            "endColumn": 81
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 73,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 73,
                            "endColumn": 96
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 34,
                            "endColumn": 71
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into bypassSecurityTrustHtml, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[bypassSecurityTrustHtml](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/search-result/search-result.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 152,
                  "endLine": 152,
                  "startColumn": 26,
                  "endColumn": 63
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2f865c2de3c371d0692fca052a9792354626c614b1fdcca9b4f5b59248e22961",
            "1": "b7602041.4773f344.607187b5.c484ae4b.ef9f7d82.8020cfdf.ea235696.cde67692.cee1e251.664e3b30.c18d1bd4.98017144.3f452f8c.7d25c6fd.ca2eca62.058e99e2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 30,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 30,
                            "endColumn": 62
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 145,
                            "endLine": 145,
                            "startColumn": 9,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 146,
                            "endLine": 146,
                            "startColumn": 9,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 20,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 147,
                            "endLine": 147,
                            "startColumn": 20,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 151,
                            "endLine": 151,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 65,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/search-result/search-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 152,
                            "endLine": 152,
                            "startColumn": 26,
                            "endColumn": 63
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into bypassSecurityTrustHtml, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[bypassSecurityTrustHtml](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/frontend/src/app/track-result/track-result.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42,
                  "startColumn": 30,
                  "endColumn": 67
                }
              }
            }
          ],
          "fingerprints": {
            "0": "62f1dbb16331714704be23ab96f35f2c80e91cbacd31e909e64b21c7224e09e0",
            "1": "cf7733e4.4773f344.ed5da594.a517c54b.ef9f7d82.32f843a3.0b4f0b50.116a0c7b.18aae5b5.70b638aa.0a3df746.c8688b2b.2e0004ea.5fce695c.0334236c.8280ec75"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 20,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 10,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 58,
                            "endColumn": 64
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 78,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 78,
                            "endColumn": 89
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 78,
                            "endColumn": 92
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 69,
                            "endColumn": 109
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/track-result/track-result.component.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 30,
                            "endColumn": 67
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[send](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/recycles.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 12,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d344bbc3f21202fa22b7fb053d1b21701cc8ff60e268922113d89625125eec3",
            "1": "716f11c4.4773f344.cae2544c.289fcdd5.d3562abd.8020cfdf.83265159.2f05c567.9dc2a0d3.4773f344.cae2544c.289fcdd5.79a7d027.f8890b3c.0334236c.e6930396"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 11,
                            "endColumn": 20
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 7,
                            "endColumn": 8
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 9
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 3,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 12,
                            "endColumn": 18
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 21,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 21,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/recycles.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 12,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/XSS",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "Unsanitized input from cookies flows into send, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14)",
              "[send](15)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/userProfile.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 11,
                  "endColumn": 18
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cc63cd444ae333ba00e61a02307056ce6ae6590ad05325fade6ca1dee5214e1a",
            "1": "839b1d0f.4773f344.a32ed1a1.d7919eeb.ef9f7d82.8020cfdf.cd61fc56.2f05c567.dca15045.6b0b4bb5.7fde84c3.72a8f743.fd661388.554abc3e.2cbfbe92.2f05c567"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 28,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 57,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 69,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 41,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 73,
                            "endColumn": 87
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 20,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 11,
                            "endColumn": 18
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedSecret",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "Hardcoded value is used as a cipher key (in crypto.createHmac). Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "Hardcoded {0} is used as a {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[value](0)",
              "[cipher key (in crypto.createHmac)](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/lib/insecurity.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 20,
                  "endColumn": 901
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9fbbb97cbcee3a0540bedb85543007066fa377686c45151c576a09cd72798049",
            "1": "ae77ea27.4773f344.277c4254.d7919eeb.a747ba9a.5fce695c.ea4b1c47.89d75565.839b1d0f.3458f5f1.191eaf2b.c559ebce.79a7d027.fbb912ee.b98ad8ad.6de55b96"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 20,
                            "endColumn": 901
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 131,
                            "endLine": 131,
                            "startColumn": 16,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedSecret",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "Hardcoded value is used as a cipher key (in crypto.createHmac). Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "Hardcoded {0} is used as a {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[value](0)",
              "[cipher key (in crypto.createHmac)](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/lib/insecurity.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 52,
                  "endColumn": 77
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9ae09d2fe0a0ab2916b8942a7747cabe7f07bbad41e3da4bb62fceb48378406f",
            "1": "37bc1bfe.4773f344.191eaf2b.d9da6552.7b7eed37.8020cfdf.7a8c7288.71520ffe.3df95e84.4773f344.191eaf2b.d9da6552.7b7eed37.8020cfdf.53ce9024.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 52,
                            "endColumn": 77
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 24,
                            "endColumn": 78
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/userProfile.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 62,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bf34c58650da8ffe3a1b170d031548106e1ec9d35461d6c967928fc2dba739a7",
            "1": "cbabde2c.4773f344.607187b5.c559ebce.fd1fa73f.5eabb05b.83265159.3cee0341.c3f8dfad.4773f344.607187b5.4f83689a.fd1fa73f.c7fba419.83265159.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 62,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 17,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/vulnCodeSnippet.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 79,
                  "startColumn": 34,
                  "endColumn": 1
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6d4b8b63260475a4c32f4681a5d358ec8157586617e2a9fa499abbf51bef0846",
            "1": "e0fda459.9c6e2949.a602c882.c559ebce.fd1fa73f.8020cfdf.83265159.e8de5297.556a3f69.4773f344.eff3b32f.c8688b2b.3a08f0d2.539bd3c1.83265159.1be96609"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 79,
                            "startColumn": 34,
                            "endColumn": 1
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 40,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/dataErasure.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 36,
                  "startColumn": 17,
                  "endColumn": 1
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cd5e6c2a28f4213309821260a33d676182434648ff4e04263e5d8b5127459e67",
            "1": "92e26ef2.4773f344.8b18f948.c559ebce.fd1fa73f.5fce695c.83265159.89d75565.92e26ef2.4773f344.8b18f948.c559ebce.fd1fa73f.5fce695c.83265159.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/dataErasure.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 36,
                            "startColumn": 17,
                            "endColumn": 1
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/dataErasure.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 32,
                            "endLine": 32,
                            "startColumn": 16,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/dataErasure.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 85,
                  "startColumn": 18,
                  "endColumn": 1
                }
              }
            }
          ],
          "fingerprints": {
            "0": "84c0b2feebcc50e9615b73700a5332f73fd1671b4ba23d0e3cf17d43e2bfd574",
            "1": "92e26ef2.4773f344.aa4dda5f.c559ebce.fd1fa73f.5fce695c.83265159.89d75565.92e26ef2.4773f344.782a8fc0.c559ebce.fd1fa73f.5fce695c.83265159.29e8dc3a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/dataErasure.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 85,
                            "startColumn": 18,
                            "endColumn": 1
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/dataErasure.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 78,
                            "endLine": 78,
                            "startColumn": 18,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/easterEgg.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 14,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c81c8f481ec0e42b951407da07faa55d74ea7276b3ec83c8a0b00dc8474c12b",
            "1": "cbabde2c.4773f344.607187b5.c559ebce.fd1fa73f.5eabb05b.83265159.3cee0341.87ba341e.4773f344.126beb45.c559ebce.fd1fa73f.45ba166c.83265159.641aa6f0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/easterEgg.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 14,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/easterEgg.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 18,
                            "endColumn": 88
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/premiumReward.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 14,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f72d8bbb07747b842227ea3081a77c92b5be25a91cb234ef84a529e2a044457e",
            "1": "cbabde2c.4773f344.607187b5.c559ebce.fd1fa73f.5eabb05b.83265159.3cee0341.40bc0bae.4773f344.126beb45.c559ebce.fd1fa73f.45ba166c.83265159.641aa6f0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/premiumReward.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 14,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/premiumReward.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 18,
                            "endColumn": 107
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/languages.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 72,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb519795107da7c865b74aa0c4c9c6587a7ad085e70114337354245834d71f6c",
            "1": "099c30d7.9c6e2949.8b18f948.c559ebce.fd1fa73f.5eabb05b.83265159.be9bb487.c3f8dfad.4773f344.eff3b32f.4f83689a.fd1fa73f.becd9ff1.83265159.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/languages.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 72,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/languages.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 17,
                            "endColumn": 60
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/privacyPolicyProof.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 14,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eb28fa7d6f8afb2b2c9e45722294b776403a81ea80871f9451a388250ac2eb4f",
            "1": "cbabde2c.4773f344.607187b5.c559ebce.fd1fa73f.5eabb05b.83265159.3cee0341.87ba341e.4773f344.126beb45.c559ebce.0cc54b27.45ba166c.83265159.641aa6f0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/privacyPolicyProof.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 14,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/privacyPolicyProof.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 18,
                            "endColumn": 84
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/videoHandler.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 42,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef680aedfd60f64a1f07e69e73415ab0a8047a4ec0ab8bc811a75b95f3bb3db3",
            "1": "e0fda459.9c6e2949.8b18f948.c559ebce.fd1fa73f.5eabb05b.83265159.be9bb487.1db69a21.4773f344.8b18f948.c559ebce.c2cde80a.2da1a176.83265159.5d34a6e5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/videoHandler.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 42,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/videoHandler.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 27,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/videoHandler.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 67,
                  "startColumn": 10,
                  "endColumn": 3
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3c34aa9460bdf0b68e170e1032bc28676c3e3b4eef2944a88e906c664428bb67",
            "1": "2fa3a5cc.4773f344.607187b5.c559ebce.fd1fa73f.5eabb05b.83265159.3cee0341.c3f8dfad.4773f344.a32ed1a1.4f83689a.fd1fa73f.c7fba419.83265159.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/videoHandler.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 67,
                            "startColumn": 10,
                            "endColumn": 3
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/videoHandler.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 17,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/ZipSlip",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "Unsanitized input from Unzipper library flows into createWriteStream, where it is used as a path after been extracted from a zip file. This may result in a Zip Slip vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path after been extracted from a zip file. This may result in a Zip Slip vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[Unzipper library](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[createWriteStream](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/fileUpload.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 30,
                  "endColumn": 49
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c8a5a9d3a22be625fc1fa7aff50f3eb9cec79df0390cafd140aaed7385e8101",
            "1": "bfc007a1.70dd3b3b.568208f0.7da15f0a.ef9f7d82.d9a6604d.6f89b54d.23a616eb.86cae134.c1245182.271a59f1.500afa7a.06305abd.d9a6604d.83265159.ef6bffc1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 21,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 13,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 38,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 34,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 23,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 51,
                            "endColumn": 82
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/fileUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 50,
                            "endLine": 50,
                            "startColumn": 30,
                            "endColumn": 49
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HTTPSourceWithUncheckedType",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "The type of this object and the value of its match property can be controlled by the user. An attacker may craft the properties of the object to crash the application or bypass its logic. Consider checking the type of the object.",
            "markdown": "The type of this {0} and the value of its {1} property can be controlled by the user. An attacker may craft the properties of the object to crash the application or bypass its logic. Consider checking the type of the object.",
            "arguments": [
              "[object](0)",
              "[match](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/profileImageUrlUpload.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 11,
                  "endColumn": 19
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a7881e260fdc7d26fb934608f927cbc057600bf72667dfaf53541298742e3581",
            "1": "6849fe68.4773f344.d2ee7ce0.d7919eeb.b6be8b13.8020cfdf.ec6ba6ab.fcee3017.6849fe68.4773f344.8b18f948.08906714.b6be8b13.8020cfdf.83265159.a41fb358"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HTTPSourceWithUncheckedType",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "The type of this object and the value of its split property can be controlled by the user. An attacker may craft the properties of the object to crash the application or bypass its logic. Consider checking the type of the object.",
            "markdown": "The type of this {0} and the value of its {1} property can be controlled by the user. An attacker may craft the properties of the object to crash the application or bypass its logic. Consider checking the type of the object.",
            "arguments": [
              "[object](0)",
              "[split](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/profileImageUrlUpload.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 118,
                  "endColumn": 126
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2242de6612f3a1af1663844b271d876d7573553aa2d95d573e8e69832e66c238",
            "1": "dca15045.bf4464f1.c13ab5fc.73f98346.b6be8b13.8020cfdf.2a970955.e6a09cc0.dca15045.bf4464f1.568208f0.08906714.79a7d027.98c7c24d.83265159.a41fb358"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 120
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 126
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/PT",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "Unsanitized input from the HTTP request body flows into createWriteStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write to arbitrary files.",
            "arguments": [
              "[the HTTP request body](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16)",
              "[createWriteStream](17)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/profileImageUrlUpload.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 33,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "16f186fb1b77e7a4eb02ef9680b3856cfb98c323ea46687a31c38187a2ab9c59",
            "1": "cf7733e4.4773f344.607187b5.876f04ab.ef9f7d82.8020cfdf.e1eea83d.25f903e1.6849fe68.bf4464f1.81f55990.08906714.3f452f8c.c3621f1a.e1eea83d.a41fb358"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 9,
                            "endColumn": 16
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 19,
                            "endColumn": 26
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 13,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 11,
                            "endColumn": 13
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 106,
                            "endColumn": 108
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 113,
                            "endColumn": 115
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 73,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 120
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 126
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 131
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 137
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 141
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 144
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 118,
                            "endColumn": 156
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 27,
                            "endLine": 27,
                            "startColumn": 21,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 54,
                            "endColumn": 137
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 33,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/CodeInjection",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "Unsanitized input from cookies flows into eval, where it is executed as JavaScript code. This may result in a Code Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is executed as JavaScript code. This may result in a Code Injection vulnerability.",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17)",
              "[eval](18)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/userProfile.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c49d269e1e5feff310b508930c52e4e6d321e9a110a848242f56c9562222619e",
            "1": "e0fda459.4773f344.8b18f948.93be4c77.ef9f7d82.8020cfdf.ea4b1c47.e8752bfb.6849fe68.6b0b4bb5.7fde84c3.93be4c77.3f452f8c.554abc3e.0334236c.e8752bfb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 28,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 57,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 15,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 48,
                            "endColumn": 55
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 26,
                            "endColumn": 33
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 26,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 19,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 31,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/Ssti",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "Unsanitized input from cookies flows into pug.compile, where it is used to construct a template that gets rendered. This may result in a Server-Side Template Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to construct a template that gets rendered. This may result in a Server-Side Template Injection vulnerability.",
            "arguments": [
              "[cookies](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30)",
              "[pug.compile](31)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/userProfile.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 22,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a39a2575be266ac16ff97c428744f30a56767d8cd0fef95694e59f317bce9ca0",
            "1": "3baa938b.4773f344.8b18f948.d7919eeb.8da73395.8020cfdf.cd61fc56.571b58cd.6849fe68.6b0b4bb5.ec66eec9.93be4c77.3f452f8c.8431f2ca.0334236c.26150c29"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 60,
                            "endColumn": 70
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 28,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 19,
                            "endLine": 19,
                            "startColumn": 13,
                            "endColumn": 24
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 11,
                            "endColumn": 22
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 30,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 9,
                            "endColumn": 28
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 57,
                            "endColumn": 60
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 26,
                            "endColumn": 40
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 69,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 55,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 37,
                            "endLine": 37,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 41,
                            "endLine": 41,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 23,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 24,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 25,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 43,
                            "endLine": 43,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 26,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 27,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 28,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 29,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 22,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 30,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 34,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 31,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/userProfile.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 46,
                            "endLine": 46,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/reDOS",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "Unsanitized user input from an HTTP parameter flows into RegExp, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "markdown": "Unsanitized user input from {0} {1} into {2}, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[RegExp](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/vulnCodeSnippet.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 21,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1a0df67c0b4b1262f919333258e0120716999478d0a05e6e78a4b650a51f4cfe",
            "1": "cf7733e4.1a0b1e78.8b18f948.d7919eeb.ef9f7d82.0c17bcdd.0b4f0b50.91c60b7d.5a562d4f.add6fbc5.2dca12fa.591d889d.5bcab2b0.f8890b3c.37913e55.1871a90c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 32,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 21,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/reDOS",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "Unsanitized user input from an HTTP parameter flows into RegExp, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "markdown": "Unsanitized user input from {0} {1} into {2}, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[RegExp](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/vulnCodeSnippet.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 17,
                  "endColumn": 75
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d98a01ba625ecc673a6a7a66a49ed46912d4d14db25cdbdd5494c70de9388ec",
            "1": "cf7733e4.4773f344.607187b5.44e38cbd.ef9f7d82.0c17bcdd.0b4f0b50.91c60b7d.5a562d4f.add6fbc5.2dca12fa.591d889d.79a7d027.f8890b3c.37913e55.1871a90c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 28,
                            "endColumn": 74
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 62,
                            "endLine": 62,
                            "startColumn": 17,
                            "endColumn": 75
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/reDOS",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "Unsanitized user input from an HTTP parameter flows into match, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "markdown": "Unsanitized user input from {0} {1} into {2}, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[match](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/vulnCodeSnippet.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 26,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bc2f9f4e3d2f5b3906a677de27e3b8fe5a7be9de7a3b133ba89f7c22265a4520",
            "1": "988d3c10.4773f344.8b18f948.d7919eeb.ef9f7d82.0c17bcdd.0b4f0b50.dc69d918.988d3c10.add6fbc5.2dca12fa.591d889d.79a7d027.f8890b3c.37913e55.dc69d918"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 39,
                            "endColumn": 136
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 48,
                            "endLine": 48,
                            "startColumn": 26,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/PrototypePollution",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into a member access and is used to access a property of a field assignment by name. This may allow a malicious user to access methods (e.g. toString) as opposed to regular properties of objects and cause a crash, remote code execution or more serious problems. This is known as a Prototype Pollution vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into a member access and is used to access a property of {2} by name. This may allow a malicious user to access methods (e.g. toString) as opposed to regular properties of objects and cause a crash, remote code execution or more serious problems. This is known as a Prototype Pollution vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[a field assignment](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/routes/vulnCodeSnippet.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 11,
                  "endColumn": 55
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8c646cbe82a252de8cef2210b3fa949c1d17b848bde49c98f04fe3875e5045c8",
            "1": "099c30d7.3f481afb.98501263.e052b9a9.79a7d027.0c17bcdd.cd61fc56.1f55c1aa.988d3c10.bf4464f1.7603686c.591d889d.79a7d027.f8890b3c.37913e55.17c85c92"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 32,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 38,
                            "endLine": 38,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 39,
                            "endLine": 39,
                            "startColumn": 7,
                            "endColumn": 15
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 40,
                            "endLine": 40,
                            "startColumn": 15,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeSnippet.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 11,
                            "endColumn": 55
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/UseCsurfForExpress",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "Consider using csurf middleware for your Express app to protect against CSRF attacks.",
            "markdown": "Consider using csurf middleware for your {0} to protect against CSRF attacks.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/server.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "startColumn": 13,
                  "endColumn": 21
                }
              }
            }
          ],
          "fingerprints": {
            "0": "34b663be78d9c7e47c9e6eac48736c1f116e7d85f8b6ca23ed518f9ff33ff618",
            "1": "a2e188ea.3fe2c7c2.92b70f9d.dc122b89.f30fb760.6f1dd2cb.ceb6c0f9.0272b8be.a2e188ea.3fe2c7c2.b60fc218.dc122b89.f30fb760.5fce695c.ceb6c0f9.0272b8be"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 74,
                            "endLine": 74,
                            "startColumn": 13,
                            "endColumn": 21
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HttpToHttps",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "http (used in require) is an insecure protocol and should not be used in new code.",
            "markdown": "{0} (used in {1}) is an insecure protocol and should not be used in new code.",
            "arguments": [
              "[http](0)",
              "[require](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/server.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 16,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "22708b83fba56403db7247a892e39f0d4d68edf5d7332484a1c9838c0fbd0ef8",
            "1": "7a85a498.4773f344.607187b5.d7919eeb.f7b6c27c.8020cfdf.ef0cc6d7.473e1c5b.7a85a498.4773f344.607187b5.d7919eeb.f7b6c27c.8020cfdf.ef0cc6d7.473e1c5b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 75,
                            "endLine": 75,
                            "startColumn": 16,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in cookie-parser.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[cookie-parser](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/server.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "startColumn": 11,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52ff19e1cb4a26893b9e234ee61b9884f545aef15e7c0d525897360570d6d60b",
            "1": "dc9d5c3a.4773f344.4ccd5cb4.d7919eeb.ef9f7d82.8020cfdf.cd61fc56.8cfeb530.dc9d5c3a.4773f344.4ccd5cb4.d7919eeb.ef9f7d82.8020cfdf.cd61fc56.8cfeb530"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 24,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 232,
                            "endLine": 232,
                            "startColumn": 11,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 32,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in post.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0cc869e4010342d03daae1ad662346ff5ee77c1e72733b75623fb0b8a18630da",
            "1": "cf7733e4.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.b6dc01e6.4773f344.c9330245.00838302.79a7d027.b392ea15.d79c4c07.f6cafdbe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 32,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in post.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24716f239721f7d7ecd19f0aa8d6842539d67476208858b57dba267d1071bcaa",
            "1": "cf7733e4.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.b6dc01e6.4773f344.c9330245.00838302.79a7d027.a536c3b3.fcf36185.5397a62b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 32,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in post.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/securityAnswerApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "663812c383a2150b375c1472299b2b3822e47d28779303631a416349d1085399",
            "1": "30fc945a.4773f344.607187b5.e052b9a9.79a7d027.0ef49ff8.6c0e7048.382555c6.30fc945a.4773f344.bd65d204.e052b9a9.79a7d027.0ef49ff8.0b4f0b50.b5f95001"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/securityAnswerApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 32,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in post.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9db3145e4a6ad25847220e1dd9281751893189b5d28ea1cd9a87d36352190574",
            "1": "cf7733e4.4773f344.4618e071.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.b6dc01e6.4773f344.bd65d204.e052b9a9.79a7d027.8020cfdf.0b4f0b50.870b3dbe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 32,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in post.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/loginApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 7,
                  "endColumn": 11
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dac7c9c367acd7ce7a63965652ad32ba2166c6ec3d8af8a0a95c6c1583eb6e2c",
            "1": "cef70b10.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.5d11da4a.382555c6.b6dc01e6.4773f344.bd65d204.e052b9a9.79a7d027.6844341c.d0c8c137.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/loginApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dfb3e27eeb78eeab57a86e03acd30135e96617838aa99b77261137b7755a0bde",
            "1": "cf7733e4.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.00838302.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f506a7060616e4654fdf9cfda63137a59a96f8ec8e0fab2eab068fd4b215fc13",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.00838302.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3d96bdecd0b21e343e4d2f92600b8c4ec7289a7e54fe144bd51911e472145102",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 270,
                            "endLine": 270,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e3c76dc8d571b6b0d1257004f6c8f539bbf9394e4405829ed695a6cc68b13f2",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "endLine": 326,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c5688c0492c1d6cfbac493aceedfb85636d34887c3b90e17485d203aaee11cef",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "13d07226e97bda3ad46f4f93382e1aba4818e5e0129b0666211a36f824adfe61",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.d79c4c07.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 29,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "endLine": 415,
                  "startColumn": 37,
                  "endColumn": 41
                }
              }
            }
          ],
          "fingerprints": {
            "0": "27e04087831768cb75a24ce4eb4312467c92d5ed7d5684d6803394946876dfce",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.d79c4c07.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 29,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 9,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6db0f8b09ea74f4a0f5e13af74067ee3942cf1524c2a55cf317c2fcb85e16f8f",
            "1": "d557d5dd.4773f344.4618e071.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 9,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8d3160b65b502c0c9f014d7a5d5c35df9666b8f3a13fc51f8d5e2a6705c7a286",
            "1": "d557d5dd.4773f344.4618e071.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 160,
                  "startColumn": 9,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "527749fe4129cd71f167f8b6dc9207ae10ea3b5b49a4ab68e6227c92b4f11d68",
            "1": "d557d5dd.4773f344.4618e071.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 33,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in login.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234,
                  "startColumn": 9,
                  "endColumn": 13
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dfe52435acc091f512718fdeae4ddf0d768e740584d7a7c8038a9371ea0d827a",
            "1": "d557d5dd.4773f344.4618e071.e052b9a9.79a7d027.fcf3002d.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bab675b8f2f1e96cf0ebf1673b5da4fb080a66029f6513011c42ce070dcaced9",
            "1": "d557d5dd.4773f344.4aa5360a.00838302.79a7d027.f7edcf51.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.00838302.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "85474a1433831a1aee8508c2c1a20d13c58fb76d45ef6946578cc1b18e8ee8da",
            "1": "d557d5dd.4773f344.607187b5.d7919eeb.79a7d027.b392ea15.6c0e7048.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "56430397a65f0f42e924c30850d6043b025d407199155416cca1896fb276bd31",
            "1": "d557d5dd.4773f344.607187b5.d7919eeb.79a7d027.f7edcf51.8ca8f00f.f6cafdbe.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 297,
                            "endLine": 297,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "bacb25a70c7884e64d1147e5be6dfc4daee060e9e5ca8168e96195b53adbf922",
            "1": "d557d5dd.4773f344.607187b5.d7919eeb.79a7d027.f7edcf51.8a2ac5c4.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 380,
                  "endLine": 380,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5e0dff55349a50fb19dd6a1074cd68e455d21bd834a1dbf68c78d1e243871781",
            "1": "306348b3.4773f344.607187b5.d7919eeb.79a7d027.f7edcf51.d79c4c07.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.d79c4c07.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 11,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 34,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in register.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 414,
                  "endLine": 414,
                  "startColumn": 22,
                  "endColumn": 26
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5c965bb8ac3c7d6c5b0d8c5c0aa772fe1dd0758de2a7d36f431dd9ed10fb481a",
            "1": "306348b3.4773f344.607187b5.d7919eeb.79a7d027.f7edcf51.d79c4c07.382555c6.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.d79c4c07.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 11,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedCredentials/test",
          "ruleIndex": 35,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in update.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in {0}.",
            "arguments": [
              "[update](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/registerSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 27,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c8cd4ffdd1069b21a7a3a7f9c2d2202e4caa1b987ce3012a51dc9af2e546e3ce",
            "1": "d557d5dd.4773f344.607187b5.e052b9a9.79a7d027.ec206f58.4ccf2770.382555c6.839b1d0f.4773f344.607187b5.d9da6552.79a7d027.8020cfdf.83265159.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/registerSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 13,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 57,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "787f37f6321f5663fe64dfb7d3e52be01bf5a6e3de25d4221dcd61d6fff90294",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 162,
                  "endLine": 162,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cdd113f03b2d1decfd7bdd6d028cfa0244be10e42b48a1e8a4a7eff59fbc4f1d",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 160,
                            "endLine": 160,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 187,
                  "endLine": 187,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd91ad78e0a219a547d16a1126f51bcd892e511087443367e66f76c04a4a01d3",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 185,
                            "endLine": 185,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f53d99f72995ec1c40fe3a597be5a2c53b569304ede931bc61c2f8250232bbe6",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 226,
                            "endLine": 226,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 270,
                  "endLine": 270,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0c52f27a3eb92a364e71155f0f2fd7b239d6eee2e785038848b3dfaa63fc9ade",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 270,
                            "endLine": 270,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "endLine": 298,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9cde6503a5a452cf58c900edba259c8f4ae8c9adb79bfa5af147c3b45abffb2e",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 298,
                            "endLine": 298,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 326,
                  "endLine": 326,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "08ad469aefc8f5c013048c9c44cb852e5c3d5e4b0bfdb9912531a9156f61be85",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 326,
                            "endLine": 326,
                            "startColumn": 29,
                            "endColumn": 54
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 352,
                  "endLine": 352,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d7b9f3c00b300e08eae4aa9d863559cfb14f7347e6723e4cc80fc18f0accd28",
            "1": "01e8e257.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 352,
                            "endLine": 352,
                            "startColumn": 29,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 381,
                  "endLine": 381,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "28539e505b28ff06bdb0fab43c1ea9ba75a124cb0666a4b1ae212f19217300c1",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 381,
                            "endLine": 381,
                            "startColumn": 29,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "endLine": 415,
                  "startColumn": 44,
                  "endColumn": 51
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8b9b5af90be7007d471aec63b649e3e0bab99f993f959284f5e7eb6c2d93f65d",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 415,
                            "endLine": 415,
                            "startColumn": 29,
                            "endColumn": 66
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "041da6af7fa3e01df24056c940b8bbe69b32e41e705c2537f198e7d4fd338550",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 51,
                            "endLine": 51,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 73,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9858d0d7e9d1a700b292657964207af65ed8f02329f50468fe67f435cd4d07bd",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "52181a785cd8bfb0a7ed9728a926085852d0cb8f30c4ba06390e5645a645217d",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 98,
                            "endLine": 98,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ce42e629e0bf45bf87a20254b5a268e3494aef7f9216767c596931f8e8197e12",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 126,
                            "endLine": 126,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 161,
                  "endLine": 161,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04f58c570971c768ff1af6fda9094c0aa9fbccf1c4cd8e83587b67c48211d0d0",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 159,
                            "endLine": 159,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5ded16575ca656a95ebb94b0a66bce7a0983c61e841435f554ea15d53aa1713",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 189,
                            "endLine": 189,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "endLine": 235,
                  "startColumn": 9,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d8276bcebf5893f6b844dfe97ee5e4b2d7766653c073c51560ae99b14330828a",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.fb19cbf2.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 233,
                            "endLine": 233,
                            "startColumn": 31,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/registerSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 89,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d5aaf37e5fba896e7446f37ed3821ff17099b60c8436fea9774eef4b4a00a0e4",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/registerSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/restApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 89,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7daec3c0949df50dc9121b8e8c642262a253c11bbd9aaac48a858baa823d723",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/restApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/restApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "endLine": 100,
                  "startColumn": 89,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "445cac28857706e233c8814690a88c3e490cbd37e8a6613fd4480a0df0cd71d3",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/restApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 100,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/deluxeApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 104,
                  "endLine": 104,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1aa582ba41ea35674efae9adf4325fbbaf81090f8031d50ea3ec16149f7eaaf3",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.2ae8f124.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/deluxeApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 102,
                            "endLine": 102,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/deluxeApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 127,
                  "endLine": 127,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d29788345aafb680d2843a8fb97c1dce742603609f36152970e03d5ee697db96",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.2ae8f124.6bb676bb.4773f344.c9330245.d7919eeb.79a7d027.5fce695c.55818220.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/deluxeApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 125,
                            "endLine": 125,
                            "startColumn": 29,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/deluxeSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c7d7bc6a3c6160f13ca34819558138fb1c8019b50e84a6426637e0702d6ffae9",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.dae232ed.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/deluxeSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/deluxeSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "dbb80013ae5a7175f0c0b931aabcf5ed17272e636f9c8fff17d954954a031601",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.dae232ed.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/deluxeSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/complainSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "257e235930ee4eb284500621345ca1e57cac6ad7311c9f153a825412df16502d",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/complainSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/dataErasureSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b7d566fc940edbf92e678931eda3e64236c950b2ef49ba5192767cad6770200c",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/dataErasureSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/b2bOrderSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef1924bcda6e55cf316f76044600a62ca922676645a3599341acd60b28728683",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/b2bOrderSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/basketSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "daa26d8080f7b8c0381cc124af190a01789a2bebe56b71ac0baaea9411c6c0b0",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/basketSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/basketSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 71,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fc6f4b70f5694b9f04c01e4e7ffec931d07e957c359f753faddf0c1a7469fbeb",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.dae232ed.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/basketSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 71,
                            "endLine": 71,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/changePasswordSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "da16ea61f56ce0c5d4f3aed68908e134f6e52ee8835dbd19462284bcbcb08821",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.4ca94ad3.ce4a9d89.3cee0341.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4ca94ad3.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/changePasswordSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/changePasswordSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 88,
                  "endColumn": 95
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb0c84076eda05afe68a238d509931b9a1eb970d723ed2cac09c170659766256",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.2ae8f124.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.2ae8f124"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/changePasswordSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 33,
                            "endLine": 33,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/searchSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "endLine": 67,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f8f15e164c0b81de01ba5a2f904a38f53f601d1de5fb9d3cf5c2b30bfc2db052",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/searchSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 67,
                            "endLine": 67,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/searchSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 77,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a7e1419c3a74b3adfd0b07537b3454b1ed144cf0ce7079c5c94eed7cf39cdbe",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/searchSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 77,
                            "endLine": 77,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/profileSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "50019067b098aa5ca51703a727a946801edc6ed003c7e6146042aada06ed78f4",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/profileSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/noSqlSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 89,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "77615bfb2db712c487180eb26abbf4e20129933b1151c8e74a93a4007c75c5f1",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/noSqlSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/noSqlSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 95,
                  "endColumn": 102
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b4a71fad1e252468798d304fda776d88d7344002eba41ef810e1ec3255d74f69",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.10f2eeef.d9612bd8.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.10f2eeef.d9612bd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/noSqlSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/noSqlSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 95,
                  "endColumn": 102
                }
              }
            }
          ],
          "fingerprints": {
            "0": "5fef84a5d35e88df8e199d3394bfe953093b9f18790fae7302a1944efbe208c0",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.10f2eeef.d9612bd8.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.10f2eeef.d9612bd8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/noSqlSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 106,
                            "endLine": 106,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/contactSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "97f67ac2bc2df757e00b2545bc1801148f6128cd214b4f55bee9fb76fdf3e3a7",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/contactSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/contactSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 89,
                  "endColumn": 96
                }
              }
            }
          ],
          "fingerprints": {
            "0": "eec78e8c6f863d4828d6dd7b2c395a2a7c5141b6c803d533dba0ed9b179367bc",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/contactSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 7,
                            "endColumn": 33
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/dataExportSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1d1c5d1aeee8507f3cd77ced193d7495d30c0db3c5b6687423c9c26ed3baf4f1",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.3cee0341.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/dataExportSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/chatbotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "2c4509c866590ee5e62980aed53dabf1f48af46c7d083f71c272dad64f89e2dc",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/chatbotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 3,
                            "endColumn": 29
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/administrationSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9a08b8e8902fbe657d775d44f31a80be793f7d3932f106bc1e03b7bb158f41de",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/administrationSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/administrationSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 87,
                  "endColumn": 94
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8a1bd68f78951e92c4c8b94397e50fd5c78656b4f85b7f648c089d444df0b44e",
            "1": "12567ef6.fb31f608.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.8b1b14ba.cf7733e4.fb31f608.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/administrationSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/totpSetupSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "endLine": 33,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c28e08f4105aad31ba5c9418e5ed03c85acd162086e846ca1b2643bc7a3d725e",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.9add11d4.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/totpSetupSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 31,
                            "endLine": 31,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 36,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in login.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[login](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2e/totpSetupSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 85,
                  "endColumn": 92
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3cd2ef982876e9dfb98a0459efc5d7d4566b696d0676af13e1b198054c06fc1e",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.3cee0341.cf7733e4.4773f344.e115913f.e052b9a9.4babb330.4c9ec5d8.cd61fc56.382555c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2e/totpSetupSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 5,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "487abe7a61f0779b2983b8bcc46fe9a10c0f0002f2ab4dd97bc1adce4a9250da",
            "1": "01e8e257.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.9add11d4.b6dc01e6.4773f344.c9330245.d7919eeb.79a7d027.8020cfdf.fb19cbf2.870b3dbe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 48,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b15b204afe3ab1ecc759384abb315e07279345c7e4dd7f6f349b439788d49410",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.52789fac.3cee0341.b6dc01e6.4773f344.c9330245.d7919eeb.79a7d027.a536c3b3.fcf36185.5397a62b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 45,
                            "endLine": 45,
                            "startColumn": 21,
                            "endColumn": 26
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/securityAnswerApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "endLine": 44,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7c1988d6cdbd5c28a5ba873bfae2ff2f3c51f272fdf4dccd05215ebf55163884",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.b5f95001.30fc945a.4773f344.bd65d204.e052b9a9.79a7d027.0ef49ff8.0b4f0b50.b5f95001"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/securityAnswerApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 42,
                            "endLine": 42,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/chatBotSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8169afbcadc96aadf67b3bbe4c2cd62314fed0f0d135389025909f9d21d169f2",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.fb19cbf2.529cfbbb.b6dc01e6.4773f344.bd65d204.e052b9a9.79a7d027.8020cfdf.fb19cbf2.870b3dbe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/chatBotSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/loginApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "26f8ae663875a5df71290a8ab1f041b699c77f6e66b98fbf59e0f23fae42df5f",
            "1": "12567ef6.4773f344.bd65d204.e052b9a9.79a7d027.6844341c.ce4a9d89.c53476bb.b6dc01e6.4773f344.bd65d204.e052b9a9.79a7d027.6844341c.d0c8c137.545e9171"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/loginApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 44,
                            "endLine": 44,
                            "startColumn": 12,
                            "endColumn": 22
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 37,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in post.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[post](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/deluxeApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 7,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f3c3ed46763946d1db7fa5182bbf74c26300d6e5a3a5fc3f67ee82cbbd8d0ac4",
            "1": "99d9a5e9.4773f344.bd65d204.e052b9a9.79a7d027.fcf3002d.ce4a9d89.2ae8f124.b6dc01e6.4773f344.bd65d204.e052b9a9.79a7d027.8020cfdf.0b4f0b50.2ae8f124"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/deluxeApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 225,
                  "endLine": 225,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "430784ddc258368d7cd23a6ec7a8f6d1b6319192c476e6d9f9b216339b650bed",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 225,
                            "endLine": 225,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 269,
                  "endLine": 269,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "b32a3ea7c0fbc5a970f3392e69d965aec77e4cf3c0b8b558616c91d65a478808",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 269,
                            "endLine": 269,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a29ecca224afd5f39c7b5bf7fb64784bdfdd7a87ed9a0327c2f9851eab6f268",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 297,
                            "endLine": 297,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "49ca55a0e0815f738000b1b5920029311e175126c131c9721a4da9a1483d2e0f",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 325,
                            "endLine": 325,
                            "startColumn": 11,
                            "endColumn": 39
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 380,
                  "endLine": 380,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c24b496fa0f27a2a3b1d66a16bba711c1121dbd8d7e232ca86927b61cea8b52d",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 380,
                            "endLine": 380,
                            "startColumn": 11,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords/test",
          "ruleIndex": 38,
          "level": "note",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in register.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[register](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 414,
                  "endLine": 414,
                  "startColumn": 29,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "86a99128d5b118f9edcf5fb84a69442b7a9dd8d53ae069c7900ff1b06d5dc8eb",
            "1": "12567ef6.4773f344.bd65d204.d7919eeb.79a7d027.f7edcf51.8932d8f7.3cee0341.6bb676bb.4773f344.c9330245.d7919eeb.ff08c1e7.5fce695c.55818220.d85bc50f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 414,
                            "endLine": 414,
                            "startColumn": 11,
                            "endColumn": 51
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedSecret/test",
          "ruleIndex": 39,
          "level": "note",
          "message": {
            "text": "Hardcoded value is used as a cipher key (in jsonwebtoken.sign). Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "Hardcoded {0} is used as a {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[value](0)",
              "[cipher key (in jsonwebtoken.sign)](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 143,
                  "endLine": 143,
                  "startColumn": 8,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "fd6d11eeb0ada30070342d148532a57dc14bb325cb9959501118f10f5d56ff5f",
            "1": "20326186.4773f344.8b18f948.d7919eeb.79a7d027.8020cfdf.df938d4d.45cbaa21.20326186.4773f344.8b18f948.d7919eeb.3c31e05c.c785452b.df938d4d.8a8217fe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 143,
                            "endLine": 143,
                            "startColumn": 8,
                            "endColumn": 38
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 140,
                            "endLine": 140,
                            "startColumn": 31,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret/test",
          "ruleIndex": 40,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "endLine": 223,
                  "startColumn": 11,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "efc51a793919a649fdfefd7ad92d8721af6727270c3c598a95a13b5bed213cf3",
            "1": "fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb.fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 20,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 223,
                            "endLine": 223,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret/test",
          "ruleIndex": 40,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 267,
                  "endLine": 267,
                  "startColumn": 11,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ee8e873bb199f84e5f27de6dbd151e3b72911aafc451712cd099f43f60f5f4ec",
            "1": "fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb.fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 267,
                            "endLine": 267,
                            "startColumn": 20,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 267,
                            "endLine": 267,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret/test",
          "ruleIndex": 40,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 295,
                  "endLine": 295,
                  "startColumn": 11,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9779251b49e63d2d49e8316906838adfd45518dab1f5485994f01a5823eaeecc",
            "1": "fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb.fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 295,
                            "endLine": 295,
                            "startColumn": 20,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 295,
                            "endLine": 295,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HardcodedNonCryptoSecret/test",
          "ruleIndex": 40,
          "level": "note",
          "message": {
            "text": "Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.",
            "markdown": "Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.",
            "arguments": [
              "[a hardcoded string](0)",
              "[here](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/2faSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 323,
                  "endLine": 323,
                  "startColumn": 11,
                  "endColumn": 16
                }
              }
            }
          ],
          "fingerprints": {
            "0": "276d211a7d93d20a2665c81b2def0c4708898c1c3512b2b5819a29b4917cc6aa",
            "1": "fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb.fc3065be.3f481afb.8b18f948.d7919eeb.79a7d027.f7edcf51.cd61fc56.01bd15bb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 20,
                            "endColumn": 41
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/2faSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 323,
                            "endLine": 323,
                            "startColumn": 11,
                            "endColumn": 16
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HttpToHttps/test",
          "ruleIndex": 43,
          "level": "note",
          "message": {
            "text": "http (used in require) is an insecure protocol and should not be used in new code.",
            "markdown": "{0} (used in {1}) is an insecure protocol and should not be used in new code.",
            "arguments": [
              "[http](0)",
              "[require](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2eSubfolder.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 16,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "c0cdb48d5e8377289d837d78bfbc52dcff82d253f38a7f3951e6f05302c0585f",
            "1": "7a85a498.4773f344.607187b5.d7919eeb.f7b6c27c.8020cfdf.ef0cc6d7.473e1c5b.7a85a498.4773f344.607187b5.d7919eeb.f7b6c27c.8020cfdf.ef0cc6d7.473e1c5b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 24,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 16,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/HttpToHttps/test",
          "ruleIndex": 43,
          "level": "note",
          "message": {
            "text": "http (used in require) is an insecure protocol and should not be used in new code.",
            "markdown": "{0} (used in {1}) is an insecure protocol and should not be used in new code.",
            "arguments": [
              "[http](0)",
              "[require](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/api/productReviewApiSpec.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 14,
                  "endColumn": 28
                }
              }
            }
          ],
          "fingerprints": {
            "0": "4684238bc16538278c23fd36b3b263b2b9057a769976041d3489f17882829d7d",
            "1": "7a85a498.4773f344.8b18f948.d7919eeb.f7b6c27c.5fce695c.ea4b1c47.89d75565.7a85a498.4773f344.8b18f948.d7919eeb.f7b6c27c.5fce695c.ea4b1c47.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/productReviewApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 22,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/api/productReviewApiSpec.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 14,
                            "endColumn": 28
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "javascript/Ssrf/test",
          "ruleIndex": 46,
          "level": "note",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into request, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3)",
              "[request](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Users/abhinav/Desktop/Code/Work/demo/juice-shop/test/e2eSubfolder.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 12,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "10105b8357c302e4f5e9ee4fcd0a48c2b7a958278f52f5538a29c2af2ca15577",
            "1": "8daf089c.4773f344.1ce84a6f.1f269b07.963cdfeb.98c7c24d.c353c4f7.27e83c6f.29386b0b.4773f344.1ce84a6f.c559ebce.79a7d027.98c7c24d.83265159.b325124d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 26,
                            "endColumn": 34
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 22,
                            "endColumn": 23
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 20,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "test/e2eSubfolder.ts",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 12,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 17,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 404,
            "isSupported": true,
            "lang": "TypeScript"
          },
          {
            "files": 55,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 3,
            "isSupported": true,
            "lang": "Python"
          }
        ]
      }
    }
  ]
}

